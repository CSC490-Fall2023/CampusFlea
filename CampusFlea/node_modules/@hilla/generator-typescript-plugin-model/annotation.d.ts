import { type NonComposedRegularSchema, type Schema } from '@hilla/generator-typescript-core/Schema.js';
import ts, { type Identifier } from 'typescript';
export type AnnotatedSchema = NonComposedRegularSchema & Readonly<{
    'x-annotations': readonly string[];
}>;
export type ValidationConstrainedSchema = NonComposedRegularSchema & Readonly<{
    'x-validation-constraints': readonly Annotation[];
}>;
export declare function isAnnotatedSchema(schema: Schema): schema is AnnotatedSchema;
export declare function isValidationConstrainedSchema(schema: Schema): schema is ValidationConstrainedSchema;
export interface Annotation {
    simpleName: string;
    attributes?: Record<string, unknown>;
}
export type AnnotationImporter = (name: string) => Identifier;
export declare class AnnotationParser {
    #private;
    constructor(importer: AnnotationImporter);
    parse(annotation: Annotation | string): ts.NewExpression;
}
//# sourceMappingURL=annotation.d.ts.map
import { type ComponentType } from 'react';
import { type ContextMenuRendererContext, type ContextMenuElement, type ContextMenuProps as _ContextMenuProps } from './generated/ContextMenu.js';
import { type ReactContextRendererProps } from './renderers/useContextRenderer.js';
export * from './generated/ContextMenu.js';
export type ContextMenuReactRendererProps = ReactContextRendererProps<ContextMenuRendererContext, ContextMenuElement>;
export type ContextMenuProps = Partial<Omit<_ContextMenuProps, 'opened' | 'renderer'>> & Readonly<{
    renderer?: ComponentType<ContextMenuReactRendererProps> | null;
}>;
declare const ForwardedContextMenu: import("react").ForwardRefExoticComponent<Partial<Omit<import("./utils/createComponent.js").ThemedWebComponentProps<ContextMenuElement, Readonly<{
    onItemSelected: import("@lit-labs/react").EventName<import("@vaadin/context-menu/src/vaadin-context-menu.js").ContextMenuItemSelectedEvent>;
    onOpenedChanged: import("@lit-labs/react").EventName<import("@vaadin/context-menu/src/vaadin-context-menu.js").ContextMenuOpenedChangedEvent>;
}>>, "opened" | "renderer">> & Readonly<{
    renderer?: ComponentType<Readonly<{
        context: ContextMenuRendererContext;
        original: ContextMenuElement;
    }>> | null | undefined;
}> & import("react").RefAttributes<ContextMenuElement>>;
export { ForwardedContextMenu as ContextMenu };
//# sourceMappingURL=ContextMenu.d.ts.map
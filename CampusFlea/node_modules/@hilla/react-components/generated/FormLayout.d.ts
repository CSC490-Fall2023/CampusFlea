import { FormLayout as FormLayoutElement } from "@vaadin/form-layout/vaadin-form-layout.js";
import * as React from "react";
import { WebComponentProps } from "../utils/createComponent.js";
export * from "@vaadin/form-layout/vaadin-form-layout.js";
export { FormLayoutElement, };
export type FormLayoutEventMap = Readonly<{}>;
export type FormLayoutProps = WebComponentProps<FormLayoutElement, FormLayoutEventMap>;
export declare const FormLayout: (props: Partial<Omit<Partial<{
    defaultChecked?: boolean | undefined;
    defaultValue?: string | number | readonly string[] | undefined;
    suppressContentEditableWarning?: boolean | undefined;
    suppressHydrationWarning?: boolean | undefined;
    accessKey?: string | undefined;
    className?: string | undefined;
    contentEditable?: (boolean | "true" | "false") | "inherit" | undefined;
    contextMenu?: string | undefined;
    dir?: string | undefined;
    draggable?: (boolean | "true" | "false") | undefined;
    hidden?: boolean | undefined;
    id?: string | undefined;
    lang?: string | undefined;
    nonce?: string | undefined;
    placeholder?: string | undefined;
    slot?: string | undefined;
    spellCheck?: (boolean | "true" | "false") | undefined;
    style?: React.CSSProperties | undefined;
    tabIndex?: number | undefined;
    title?: string | undefined;
    translate?: "yes" | "no" | undefined;
    radioGroup?: string | undefined;
    role?: React.AriaRole | undefined;
    about?: string | undefined;
    datatype?: string | undefined;
    inlist?: any;
    prefix?: string | undefined;
    property?: string | undefined;
    resource?: string | undefined;
    typeof?: string | undefined;
    vocab?: string | undefined;
    autoCapitalize?: string | undefined;
    autoCorrect?: string | undefined;
    autoSave?: string | undefined;
    color?: string | undefined;
    itemProp?: string | undefined;
    itemScope?: boolean | undefined;
    itemType?: string | undefined;
    itemID?: string | undefined;
    itemRef?: string | undefined;
    results?: number | undefined;
    security?: string | undefined;
    unselectable?: "on" | "off" | undefined;
    inputMode?: "none" | "search" | "text" | "tel" | "url" | "email" | "numeric" | "decimal" | undefined;
    is?: string | undefined;
    'aria-activedescendant'?: string | undefined;
    'aria-atomic'?: (boolean | "true" | "false") | undefined;
    'aria-autocomplete'?: "list" | "none" | "inline" | "both" | undefined;
    'aria-busy'?: (boolean | "true" | "false") | undefined;
    'aria-checked'?: boolean | "true" | "false" | "mixed" | undefined;
    'aria-colcount'?: number | undefined;
    'aria-colindex'?: number | undefined;
    'aria-colspan'?: number | undefined;
    'aria-controls'?: string | undefined;
    'aria-current'?: boolean | "true" | "false" | "page" | "step" | "location" | "date" | "time" | undefined;
    'aria-describedby'?: string | undefined;
    'aria-details'?: string | undefined;
    'aria-disabled'?: (boolean | "true" | "false") | undefined;
    'aria-dropeffect'?: "link" | "none" | "copy" | "execute" | "move" | "popup" | undefined;
    'aria-errormessage'?: string | undefined;
    'aria-expanded'?: (boolean | "true" | "false") | undefined;
    'aria-flowto'?: string | undefined;
    'aria-grabbed'?: (boolean | "true" | "false") | undefined;
    'aria-haspopup'?: boolean | "true" | "false" | "dialog" | "grid" | "listbox" | "menu" | "tree" | undefined;
    'aria-hidden'?: (boolean | "true" | "false") | undefined;
    'aria-invalid'?: boolean | "true" | "false" | "grammar" | "spelling" | undefined;
    'aria-keyshortcuts'?: string | undefined;
    'aria-label'?: string | undefined;
    'aria-labelledby'?: string | undefined;
    'aria-level'?: number | undefined;
    'aria-live'?: "off" | "assertive" | "polite" | undefined;
    'aria-modal'?: (boolean | "true" | "false") | undefined;
    'aria-multiline'?: (boolean | "true" | "false") | undefined;
    'aria-multiselectable'?: (boolean | "true" | "false") | undefined;
    'aria-orientation'?: "horizontal" | "vertical" | undefined;
    'aria-owns'?: string | undefined;
    'aria-placeholder'?: string | undefined;
    'aria-posinset'?: number | undefined;
    'aria-pressed'?: boolean | "true" | "false" | "mixed" | undefined;
    'aria-readonly'?: (boolean | "true" | "false") | undefined;
    'aria-relevant'?: "text" | "additions" | "additions removals" | "additions text" | "all" | "removals" | "removals additions" | "removals text" | "text additions" | "text removals" | undefined;
    'aria-required'?: (boolean | "true" | "false") | undefined;
    'aria-roledescription'?: string | undefined;
    'aria-rowcount'?: number | undefined;
    'aria-rowindex'?: number | undefined;
    'aria-rowspan'?: number | undefined;
    'aria-selected'?: (boolean | "true" | "false") | undefined;
    'aria-setsize'?: number | undefined;
    'aria-sort'?: "none" | "ascending" | "descending" | "other" | undefined;
    'aria-valuemax'?: number | undefined;
    'aria-valuemin'?: number | undefined;
    'aria-valuenow'?: number | undefined;
    'aria-valuetext'?: string | undefined;
    children?: React.ReactNode;
    dangerouslySetInnerHTML?: {
        __html: string;
    } | undefined;
    onCopy?: React.ClipboardEventHandler<FormLayoutElement> | undefined;
    onCopyCapture?: React.ClipboardEventHandler<FormLayoutElement> | undefined;
    onCut?: React.ClipboardEventHandler<FormLayoutElement> | undefined;
    onCutCapture?: React.ClipboardEventHandler<FormLayoutElement> | undefined;
    onPaste?: React.ClipboardEventHandler<FormLayoutElement> | undefined;
    onPasteCapture?: React.ClipboardEventHandler<FormLayoutElement> | undefined;
    onCompositionEnd?: React.CompositionEventHandler<FormLayoutElement> | undefined;
    onCompositionEndCapture?: React.CompositionEventHandler<FormLayoutElement> | undefined;
    onCompositionStart?: React.CompositionEventHandler<FormLayoutElement> | undefined;
    onCompositionStartCapture?: React.CompositionEventHandler<FormLayoutElement> | undefined;
    onCompositionUpdate?: React.CompositionEventHandler<FormLayoutElement> | undefined;
    onCompositionUpdateCapture?: React.CompositionEventHandler<FormLayoutElement> | undefined;
    onFocus?: React.FocusEventHandler<FormLayoutElement> | undefined;
    onFocusCapture?: React.FocusEventHandler<FormLayoutElement> | undefined;
    onBlur?: React.FocusEventHandler<FormLayoutElement> | undefined;
    onBlurCapture?: React.FocusEventHandler<FormLayoutElement> | undefined;
    onChange?: React.FormEventHandler<FormLayoutElement> | undefined;
    onChangeCapture?: React.FormEventHandler<FormLayoutElement> | undefined;
    onBeforeInput?: React.FormEventHandler<FormLayoutElement> | undefined;
    onBeforeInputCapture?: React.FormEventHandler<FormLayoutElement> | undefined;
    onInput?: React.FormEventHandler<FormLayoutElement> | undefined;
    onInputCapture?: React.FormEventHandler<FormLayoutElement> | undefined;
    onReset?: React.FormEventHandler<FormLayoutElement> | undefined;
    onResetCapture?: React.FormEventHandler<FormLayoutElement> | undefined;
    onSubmit?: React.FormEventHandler<FormLayoutElement> | undefined;
    onSubmitCapture?: React.FormEventHandler<FormLayoutElement> | undefined;
    onInvalid?: React.FormEventHandler<FormLayoutElement> | undefined;
    onInvalidCapture?: React.FormEventHandler<FormLayoutElement> | undefined;
    onLoad?: React.ReactEventHandler<FormLayoutElement> | undefined;
    onLoadCapture?: React.ReactEventHandler<FormLayoutElement> | undefined;
    onError?: React.ReactEventHandler<FormLayoutElement> | undefined;
    onErrorCapture?: React.ReactEventHandler<FormLayoutElement> | undefined;
    onKeyDown?: React.KeyboardEventHandler<FormLayoutElement> | undefined;
    onKeyDownCapture?: React.KeyboardEventHandler<FormLayoutElement> | undefined;
    onKeyPress?: React.KeyboardEventHandler<FormLayoutElement> | undefined;
    onKeyPressCapture?: React.KeyboardEventHandler<FormLayoutElement> | undefined;
    onKeyUp?: React.KeyboardEventHandler<FormLayoutElement> | undefined;
    onKeyUpCapture?: React.KeyboardEventHandler<FormLayoutElement> | undefined;
    onAbort?: React.ReactEventHandler<FormLayoutElement> | undefined;
    onAbortCapture?: React.ReactEventHandler<FormLayoutElement> | undefined;
    onCanPlay?: React.ReactEventHandler<FormLayoutElement> | undefined;
    onCanPlayCapture?: React.ReactEventHandler<FormLayoutElement> | undefined;
    onCanPlayThrough?: React.ReactEventHandler<FormLayoutElement> | undefined;
    onCanPlayThroughCapture?: React.ReactEventHandler<FormLayoutElement> | undefined;
    onDurationChange?: React.ReactEventHandler<FormLayoutElement> | undefined;
    onDurationChangeCapture?: React.ReactEventHandler<FormLayoutElement> | undefined;
    onEmptied?: React.ReactEventHandler<FormLayoutElement> | undefined;
    onEmptiedCapture?: React.ReactEventHandler<FormLayoutElement> | undefined;
    onEncrypted?: React.ReactEventHandler<FormLayoutElement> | undefined;
    onEncryptedCapture?: React.ReactEventHandler<FormLayoutElement> | undefined;
    onEnded?: React.ReactEventHandler<FormLayoutElement> | undefined;
    onEndedCapture?: React.ReactEventHandler<FormLayoutElement> | undefined;
    onLoadedData?: React.ReactEventHandler<FormLayoutElement> | undefined;
    onLoadedDataCapture?: React.ReactEventHandler<FormLayoutElement> | undefined;
    onLoadedMetadata?: React.ReactEventHandler<FormLayoutElement> | undefined;
    onLoadedMetadataCapture?: React.ReactEventHandler<FormLayoutElement> | undefined;
    onLoadStart?: React.ReactEventHandler<FormLayoutElement> | undefined;
    onLoadStartCapture?: React.ReactEventHandler<FormLayoutElement> | undefined;
    onPause?: React.ReactEventHandler<FormLayoutElement> | undefined;
    onPauseCapture?: React.ReactEventHandler<FormLayoutElement> | undefined;
    onPlay?: React.ReactEventHandler<FormLayoutElement> | undefined;
    onPlayCapture?: React.ReactEventHandler<FormLayoutElement> | undefined;
    onPlaying?: React.ReactEventHandler<FormLayoutElement> | undefined;
    onPlayingCapture?: React.ReactEventHandler<FormLayoutElement> | undefined;
    onProgress?: React.ReactEventHandler<FormLayoutElement> | undefined;
    onProgressCapture?: React.ReactEventHandler<FormLayoutElement> | undefined;
    onRateChange?: React.ReactEventHandler<FormLayoutElement> | undefined;
    onRateChangeCapture?: React.ReactEventHandler<FormLayoutElement> | undefined;
    onResize?: React.ReactEventHandler<FormLayoutElement> | undefined;
    onResizeCapture?: React.ReactEventHandler<FormLayoutElement> | undefined;
    onSeeked?: React.ReactEventHandler<FormLayoutElement> | undefined;
    onSeekedCapture?: React.ReactEventHandler<FormLayoutElement> | undefined;
    onSeeking?: React.ReactEventHandler<FormLayoutElement> | undefined;
    onSeekingCapture?: React.ReactEventHandler<FormLayoutElement> | undefined;
    onStalled?: React.ReactEventHandler<FormLayoutElement> | undefined;
    onStalledCapture?: React.ReactEventHandler<FormLayoutElement> | undefined;
    onSuspend?: React.ReactEventHandler<FormLayoutElement> | undefined;
    onSuspendCapture?: React.ReactEventHandler<FormLayoutElement> | undefined;
    onTimeUpdate?: React.ReactEventHandler<FormLayoutElement> | undefined;
    onTimeUpdateCapture?: React.ReactEventHandler<FormLayoutElement> | undefined;
    onVolumeChange?: React.ReactEventHandler<FormLayoutElement> | undefined;
    onVolumeChangeCapture?: React.ReactEventHandler<FormLayoutElement> | undefined;
    onWaiting?: React.ReactEventHandler<FormLayoutElement> | undefined;
    onWaitingCapture?: React.ReactEventHandler<FormLayoutElement> | undefined;
    onAuxClick?: React.MouseEventHandler<FormLayoutElement> | undefined;
    onAuxClickCapture?: React.MouseEventHandler<FormLayoutElement> | undefined;
    onClick?: React.MouseEventHandler<FormLayoutElement> | undefined;
    onClickCapture?: React.MouseEventHandler<FormLayoutElement> | undefined;
    onContextMenu?: React.MouseEventHandler<FormLayoutElement> | undefined;
    onContextMenuCapture?: React.MouseEventHandler<FormLayoutElement> | undefined;
    onDoubleClick?: React.MouseEventHandler<FormLayoutElement> | undefined;
    onDoubleClickCapture?: React.MouseEventHandler<FormLayoutElement> | undefined;
    onDrag?: React.DragEventHandler<FormLayoutElement> | undefined;
    onDragCapture?: React.DragEventHandler<FormLayoutElement> | undefined;
    onDragEnd?: React.DragEventHandler<FormLayoutElement> | undefined;
    onDragEndCapture?: React.DragEventHandler<FormLayoutElement> | undefined;
    onDragEnter?: React.DragEventHandler<FormLayoutElement> | undefined;
    onDragEnterCapture?: React.DragEventHandler<FormLayoutElement> | undefined;
    onDragExit?: React.DragEventHandler<FormLayoutElement> | undefined;
    onDragExitCapture?: React.DragEventHandler<FormLayoutElement> | undefined;
    onDragLeave?: React.DragEventHandler<FormLayoutElement> | undefined;
    onDragLeaveCapture?: React.DragEventHandler<FormLayoutElement> | undefined;
    onDragOver?: React.DragEventHandler<FormLayoutElement> | undefined;
    onDragOverCapture?: React.DragEventHandler<FormLayoutElement> | undefined;
    onDragStart?: React.DragEventHandler<FormLayoutElement> | undefined;
    onDragStartCapture?: React.DragEventHandler<FormLayoutElement> | undefined;
    onDrop?: React.DragEventHandler<FormLayoutElement> | undefined;
    onDropCapture?: React.DragEventHandler<FormLayoutElement> | undefined;
    onMouseDown?: React.MouseEventHandler<FormLayoutElement> | undefined;
    onMouseDownCapture?: React.MouseEventHandler<FormLayoutElement> | undefined;
    onMouseEnter?: React.MouseEventHandler<FormLayoutElement> | undefined;
    onMouseLeave?: React.MouseEventHandler<FormLayoutElement> | undefined;
    onMouseMove?: React.MouseEventHandler<FormLayoutElement> | undefined;
    onMouseMoveCapture?: React.MouseEventHandler<FormLayoutElement> | undefined;
    onMouseOut?: React.MouseEventHandler<FormLayoutElement> | undefined;
    onMouseOutCapture?: React.MouseEventHandler<FormLayoutElement> | undefined;
    onMouseOver?: React.MouseEventHandler<FormLayoutElement> | undefined;
    onMouseOverCapture?: React.MouseEventHandler<FormLayoutElement> | undefined;
    onMouseUp?: React.MouseEventHandler<FormLayoutElement> | undefined;
    onMouseUpCapture?: React.MouseEventHandler<FormLayoutElement> | undefined;
    onSelect?: React.ReactEventHandler<FormLayoutElement> | undefined;
    onSelectCapture?: React.ReactEventHandler<FormLayoutElement> | undefined;
    onTouchCancel?: React.TouchEventHandler<FormLayoutElement> | undefined;
    onTouchCancelCapture?: React.TouchEventHandler<FormLayoutElement> | undefined;
    onTouchEnd?: React.TouchEventHandler<FormLayoutElement> | undefined;
    onTouchEndCapture?: React.TouchEventHandler<FormLayoutElement> | undefined;
    onTouchMove?: React.TouchEventHandler<FormLayoutElement> | undefined;
    onTouchMoveCapture?: React.TouchEventHandler<FormLayoutElement> | undefined;
    onTouchStart?: React.TouchEventHandler<FormLayoutElement> | undefined;
    onTouchStartCapture?: React.TouchEventHandler<FormLayoutElement> | undefined;
    onPointerDown?: React.PointerEventHandler<FormLayoutElement> | undefined;
    onPointerDownCapture?: React.PointerEventHandler<FormLayoutElement> | undefined;
    onPointerMove?: React.PointerEventHandler<FormLayoutElement> | undefined;
    onPointerMoveCapture?: React.PointerEventHandler<FormLayoutElement> | undefined;
    onPointerUp?: React.PointerEventHandler<FormLayoutElement> | undefined;
    onPointerUpCapture?: React.PointerEventHandler<FormLayoutElement> | undefined;
    onPointerCancel?: React.PointerEventHandler<FormLayoutElement> | undefined;
    onPointerCancelCapture?: React.PointerEventHandler<FormLayoutElement> | undefined;
    onPointerEnter?: React.PointerEventHandler<FormLayoutElement> | undefined;
    onPointerEnterCapture?: React.PointerEventHandler<FormLayoutElement> | undefined;
    onPointerLeave?: React.PointerEventHandler<FormLayoutElement> | undefined;
    onPointerLeaveCapture?: React.PointerEventHandler<FormLayoutElement> | undefined;
    onPointerOver?: React.PointerEventHandler<FormLayoutElement> | undefined;
    onPointerOverCapture?: React.PointerEventHandler<FormLayoutElement> | undefined;
    onPointerOut?: React.PointerEventHandler<FormLayoutElement> | undefined;
    onPointerOutCapture?: React.PointerEventHandler<FormLayoutElement> | undefined;
    onGotPointerCapture?: React.PointerEventHandler<FormLayoutElement> | undefined;
    onGotPointerCaptureCapture?: React.PointerEventHandler<FormLayoutElement> | undefined;
    onLostPointerCapture?: React.PointerEventHandler<FormLayoutElement> | undefined;
    onLostPointerCaptureCapture?: React.PointerEventHandler<FormLayoutElement> | undefined;
    onScroll?: React.UIEventHandler<FormLayoutElement> | undefined;
    onScrollCapture?: React.UIEventHandler<FormLayoutElement> | undefined;
    onWheel?: React.WheelEventHandler<FormLayoutElement> | undefined;
    onWheelCapture?: React.WheelEventHandler<FormLayoutElement> | undefined;
    onAnimationStart?: React.AnimationEventHandler<FormLayoutElement> | undefined;
    onAnimationStartCapture?: React.AnimationEventHandler<FormLayoutElement> | undefined;
    onAnimationEnd?: React.AnimationEventHandler<FormLayoutElement> | undefined;
    onAnimationEndCapture?: React.AnimationEventHandler<FormLayoutElement> | undefined;
    onAnimationIteration?: React.AnimationEventHandler<FormLayoutElement> | undefined;
    onAnimationIterationCapture?: React.AnimationEventHandler<FormLayoutElement> | undefined;
    onTransitionEnd?: React.TransitionEventHandler<FormLayoutElement> | undefined;
    onTransitionEndCapture?: React.TransitionEventHandler<FormLayoutElement> | undefined;
} & {
    readonly accessKeyLabel: string;
    autocapitalize: string;
    inert: boolean;
    innerText: string;
    readonly offsetHeight: number;
    readonly offsetLeft: number;
    readonly offsetParent: Element | null;
    readonly offsetTop: number;
    readonly offsetWidth: number;
    outerText: string;
    spellcheck: boolean;
    attachInternals: () => ElementInternals;
    click: () => void;
    addEventListener: {
        <K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions | undefined): void;
        (type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions | undefined): void;
    };
    removeEventListener: {
        <K_1 extends keyof HTMLElementEventMap>(type: K_1, listener: (this: HTMLElement, ev: HTMLElementEventMap[K_1]) => any, options?: boolean | EventListenerOptions | undefined): void;
        (type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions | undefined): void;
    };
    readonly attributes: NamedNodeMap;
    readonly classList: DOMTokenList;
    readonly clientHeight: number;
    readonly clientLeft: number;
    readonly clientTop: number;
    readonly clientWidth: number;
    readonly localName: string;
    readonly namespaceURI: string | null;
    onfullscreenchange: ((this: Element, ev: Event) => any) | null;
    onfullscreenerror: ((this: Element, ev: Event) => any) | null;
    outerHTML: string;
    readonly ownerDocument: Document;
    readonly part: DOMTokenList;
    readonly scrollHeight: number;
    scrollLeft: number;
    scrollTop: number;
    readonly scrollWidth: number;
    readonly shadowRoot: ShadowRoot | null;
    readonly tagName: string;
    attachShadow: (init: ShadowRootInit) => ShadowRoot;
    closest: {
        <K_2 extends keyof HTMLElementTagNameMap>(selector: K_2): HTMLElementTagNameMap[K_2] | null;
        <K_3 extends keyof SVGElementTagNameMap>(selector: K_3): SVGElementTagNameMap[K_3] | null;
        <E extends Element = Element>(selectors: string): E | null;
    };
    getAttribute: (qualifiedName: string) => string | null;
    getAttributeNS: (namespace: string | null, localName: string) => string | null;
    getAttributeNames: () => string[];
    getAttributeNode: (qualifiedName: string) => Attr | null;
    getAttributeNodeNS: (namespace: string | null, localName: string) => Attr | null;
    getBoundingClientRect: () => DOMRect;
    getClientRects: () => DOMRectList;
    getElementsByClassName: (classNames: string) => HTMLCollectionOf<Element>;
    getElementsByTagName: {
        <K_4 extends keyof HTMLElementTagNameMap>(qualifiedName: K_4): HTMLCollectionOf<HTMLElementTagNameMap[K_4]>;
        <K_5 extends keyof SVGElementTagNameMap>(qualifiedName: K_5): HTMLCollectionOf<SVGElementTagNameMap[K_5]>;
        (qualifiedName: string): HTMLCollectionOf<Element>;
    };
    getElementsByTagNameNS: {
        (namespaceURI: "http://www.w3.org/1999/xhtml", localName: string): HTMLCollectionOf<HTMLElement>;
        (namespaceURI: "http://www.w3.org/2000/svg", localName: string): HTMLCollectionOf<SVGElement>;
        (namespace: string | null, localName: string): HTMLCollectionOf<Element>;
    };
    hasAttribute: (qualifiedName: string) => boolean;
    hasAttributeNS: (namespace: string | null, localName: string) => boolean;
    hasAttributes: () => boolean;
    hasPointerCapture: (pointerId: number) => boolean;
    insertAdjacentElement: (where: InsertPosition, element: Element) => Element | null;
    insertAdjacentHTML: (position: InsertPosition, text: string) => void;
    insertAdjacentText: (where: InsertPosition, data: string) => void;
    matches: (selectors: string) => boolean;
    releasePointerCapture: (pointerId: number) => void;
    removeAttribute: (qualifiedName: string) => void;
    removeAttributeNS: (namespace: string | null, localName: string) => void;
    removeAttributeNode: (attr: Attr) => Attr;
    requestFullscreen: (options?: FullscreenOptions | undefined) => Promise<void>;
    requestPointerLock: () => void;
    scroll: {
        (options?: ScrollToOptions | undefined): void;
        (x: number, y: number): void;
    };
    scrollBy: {
        (options?: ScrollToOptions | undefined): void;
        (x: number, y: number): void;
    };
    scrollIntoView: (arg?: boolean | ScrollIntoViewOptions | undefined) => void;
    scrollTo: {
        (options?: ScrollToOptions | undefined): void;
        (x: number, y: number): void;
    };
    setAttribute: (qualifiedName: string, value: string) => void;
    setAttributeNS: (namespace: string | null, qualifiedName: string, value: string) => void;
    setAttributeNode: (attr: Attr) => Attr | null;
    setAttributeNodeNS: (attr: Attr) => Attr | null;
    setPointerCapture: (pointerId: number) => void;
    toggleAttribute: (qualifiedName: string, force?: boolean | undefined) => boolean;
    webkitMatchesSelector: (selectors: string) => boolean;
    readonly baseURI: string;
    readonly childNodes: NodeListOf<ChildNode>;
    readonly firstChild: ChildNode | null;
    readonly isConnected: boolean;
    readonly lastChild: ChildNode | null;
    readonly nextSibling: ChildNode | null;
    readonly nodeName: string;
    readonly nodeType: number;
    nodeValue: string | null;
    readonly parentElement: HTMLElement | null;
    readonly parentNode: ParentNode | null;
    readonly previousSibling: ChildNode | null;
    textContent: string | null;
    appendChild: <T extends Node>(node: T) => T;
    cloneNode: (deep?: boolean | undefined) => Node;
    compareDocumentPosition: (other: Node) => number;
    contains: (other: Node | null) => boolean;
    getRootNode: (options?: GetRootNodeOptions | undefined) => Node;
    hasChildNodes: () => boolean;
    insertBefore: <T_1 extends Node>(node: T_1, child: Node | null) => T_1;
    isDefaultNamespace: (namespace: string | null) => boolean;
    isEqualNode: (otherNode: Node | null) => boolean;
    isSameNode: (otherNode: Node | null) => boolean;
    lookupNamespaceURI: (prefix: string | null) => string | null;
    lookupPrefix: (namespace: string | null) => string | null;
    normalize: () => void;
    removeChild: <T_2 extends Node>(child: T_2) => T_2;
    replaceChild: <T_3 extends Node>(node: Node, child: T_3) => T_3;
    readonly ATTRIBUTE_NODE: number;
    readonly CDATA_SECTION_NODE: number;
    readonly COMMENT_NODE: number;
    readonly DOCUMENT_FRAGMENT_NODE: number;
    readonly DOCUMENT_NODE: number;
    readonly DOCUMENT_POSITION_CONTAINED_BY: number;
    readonly DOCUMENT_POSITION_CONTAINS: number;
    readonly DOCUMENT_POSITION_DISCONNECTED: number;
    readonly DOCUMENT_POSITION_FOLLOWING: number;
    readonly DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC: number;
    readonly DOCUMENT_POSITION_PRECEDING: number;
    readonly DOCUMENT_TYPE_NODE: number;
    readonly ELEMENT_NODE: number;
    readonly ENTITY_NODE: number;
    readonly ENTITY_REFERENCE_NODE: number;
    readonly NOTATION_NODE: number;
    readonly PROCESSING_INSTRUCTION_NODE: number;
    readonly TEXT_NODE: number;
    dispatchEvent: (event: Event) => boolean;
    ariaAtomic: string | null;
    ariaAutoComplete: string | null;
    ariaBusy: string | null;
    ariaChecked: string | null;
    ariaColCount: string | null;
    ariaColIndex: string | null;
    ariaColIndexText: string | null;
    ariaColSpan: string | null;
    ariaCurrent: string | null;
    ariaDisabled: string | null;
    ariaExpanded: string | null;
    ariaHasPopup: string | null;
    ariaHidden: string | null;
    ariaInvalid: string | null;
    ariaKeyShortcuts: string | null;
    ariaLabel: string | null;
    ariaLevel: string | null;
    ariaLive: string | null;
    ariaModal: string | null;
    ariaMultiLine: string | null;
    ariaMultiSelectable: string | null;
    ariaOrientation: string | null;
    ariaPlaceholder: string | null;
    ariaPosInSet: string | null;
    ariaPressed: string | null;
    ariaReadOnly: string | null;
    ariaRequired: string | null;
    ariaRoleDescription: string | null;
    ariaRowCount: string | null;
    ariaRowIndex: string | null;
    ariaRowIndexText: string | null;
    ariaRowSpan: string | null;
    ariaSelected: string | null;
    ariaSetSize: string | null;
    ariaSort: string | null;
    ariaValueMax: string | null;
    ariaValueMin: string | null;
    ariaValueNow: string | null;
    ariaValueText: string | null;
    animate: (keyframes: Keyframe[] | PropertyIndexedKeyframes | null, options?: number | KeyframeAnimationOptions | undefined) => Animation;
    getAnimations: (options?: GetAnimationsOptions | undefined) => Animation[];
    after: (...nodes: (string | Node)[]) => void;
    before: (...nodes: (string | Node)[]) => void;
    remove: () => void;
    replaceWith: (...nodes: (string | Node)[]) => void;
    innerHTML: string;
    readonly nextElementSibling: Element | null;
    readonly previousElementSibling: Element | null;
    readonly childElementCount: number;
    readonly firstElementChild: Element | null;
    readonly lastElementChild: Element | null;
    append: (...nodes: (string | Node)[]) => void;
    prepend: (...nodes: (string | Node)[]) => void;
    querySelector: {
        <K_6 extends keyof HTMLElementTagNameMap>(selectors: K_6): HTMLElementTagNameMap[K_6] | null;
        <K_7 extends keyof SVGElementTagNameMap>(selectors: K_7): SVGElementTagNameMap[K_7] | null;
        <E_1 extends Element = Element>(selectors: string): E_1 | null;
    };
    querySelectorAll: {
        <K_8 extends keyof HTMLElementTagNameMap>(selectors: K_8): NodeListOf<HTMLElementTagNameMap[K_8]>;
        <K_9 extends keyof SVGElementTagNameMap>(selectors: K_9): NodeListOf<SVGElementTagNameMap[K_9]>;
        <E_2 extends Element = Element>(selectors: string): NodeListOf<E_2>;
    };
    replaceChildren: (...nodes: (string | Node)[]) => void;
    readonly assignedSlot: HTMLSlotElement | null;
    oncopy: ((this: DocumentAndElementEventHandlers, ev: ClipboardEvent) => any) | null;
    oncut: ((this: DocumentAndElementEventHandlers, ev: ClipboardEvent) => any) | null;
    onpaste: ((this: DocumentAndElementEventHandlers, ev: ClipboardEvent) => any) | null;
    enterKeyHint: string;
    readonly isContentEditable: boolean;
    onabort: ((this: GlobalEventHandlers, ev: UIEvent) => any) | null;
    onanimationcancel: ((this: GlobalEventHandlers, ev: AnimationEvent) => any) | null;
    onanimationend: ((this: GlobalEventHandlers, ev: AnimationEvent) => any) | null;
    onanimationiteration: ((this: GlobalEventHandlers, ev: AnimationEvent) => any) | null;
    onanimationstart: ((this: GlobalEventHandlers, ev: AnimationEvent) => any) | null;
    onauxclick: ((this: GlobalEventHandlers, ev: MouseEvent) => any) | null;
    onbeforeinput: ((this: GlobalEventHandlers, ev: InputEvent) => any) | null;
    onblur: ((this: GlobalEventHandlers, ev: FocusEvent) => any) | null;
    oncancel: ((this: GlobalEventHandlers, ev: Event) => any) | null;
    oncanplay: ((this: GlobalEventHandlers, ev: Event) => any) | null;
    oncanplaythrough: ((this: GlobalEventHandlers, ev: Event) => any) | null;
    onchange: ((this: GlobalEventHandlers, ev: Event) => any) | null;
    onclick: ((this: GlobalEventHandlers, ev: MouseEvent) => any) | null;
    onclose: ((this: GlobalEventHandlers, ev: Event) => any) | null;
    oncontextmenu: ((this: GlobalEventHandlers, ev: MouseEvent) => any) | null;
    oncuechange: ((this: GlobalEventHandlers, ev: Event) => any) | null;
    ondblclick: ((this: GlobalEventHandlers, ev: MouseEvent) => any) | null;
    ondrag: ((this: GlobalEventHandlers, ev: DragEvent) => any) | null;
    ondragend: ((this: GlobalEventHandlers, ev: DragEvent) => any) | null;
    ondragenter: ((this: GlobalEventHandlers, ev: DragEvent) => any) | null;
    ondragleave: ((this: GlobalEventHandlers, ev: DragEvent) => any) | null;
    ondragover: ((this: GlobalEventHandlers, ev: DragEvent) => any) | null;
    ondragstart: ((this: GlobalEventHandlers, ev: DragEvent) => any) | null;
    ondrop: ((this: GlobalEventHandlers, ev: DragEvent) => any) | null;
    ondurationchange: ((this: GlobalEventHandlers, ev: Event) => any) | null;
    onemptied: ((this: GlobalEventHandlers, ev: Event) => any) | null;
    onended: ((this: GlobalEventHandlers, ev: Event) => any) | null;
    onerror: OnErrorEventHandler;
    onfocus: ((this: GlobalEventHandlers, ev: FocusEvent) => any) | null;
    onformdata: ((this: GlobalEventHandlers, ev: FormDataEvent) => any) | null;
    ongotpointercapture: ((this: GlobalEventHandlers, ev: PointerEvent) => any) | null;
    oninput: ((this: GlobalEventHandlers, ev: Event) => any) | null;
    oninvalid: ((this: GlobalEventHandlers, ev: Event) => any) | null;
    onkeydown: ((this: GlobalEventHandlers, ev: KeyboardEvent) => any) | null;
    onkeypress: ((this: GlobalEventHandlers, ev: KeyboardEvent) => any) | null;
    onkeyup: ((this: GlobalEventHandlers, ev: KeyboardEvent) => any) | null;
    onload: ((this: GlobalEventHandlers, ev: Event) => any) | null;
    onloadeddata: ((this: GlobalEventHandlers, ev: Event) => any) | null;
    onloadedmetadata: ((this: GlobalEventHandlers, ev: Event) => any) | null;
    onloadstart: ((this: GlobalEventHandlers, ev: Event) => any) | null;
    onlostpointercapture: ((this: GlobalEventHandlers, ev: PointerEvent) => any) | null;
    onmousedown: ((this: GlobalEventHandlers, ev: MouseEvent) => any) | null;
    onmouseenter: ((this: GlobalEventHandlers, ev: MouseEvent) => any) | null;
    onmouseleave: ((this: GlobalEventHandlers, ev: MouseEvent) => any) | null;
    onmousemove: ((this: GlobalEventHandlers, ev: MouseEvent) => any) | null;
    onmouseout: ((this: GlobalEventHandlers, ev: MouseEvent) => any) | null;
    onmouseover: ((this: GlobalEventHandlers, ev: MouseEvent) => any) | null;
    onmouseup: ((this: GlobalEventHandlers, ev: MouseEvent) => any) | null;
    onpause: ((this: GlobalEventHandlers, ev: Event) => any) | null;
    onplay: ((this: GlobalEventHandlers, ev: Event) => any) | null;
    onplaying: ((this: GlobalEventHandlers, ev: Event) => any) | null;
    onpointercancel: ((this: GlobalEventHandlers, ev: PointerEvent) => any) | null;
    onpointerdown: ((this: GlobalEventHandlers, ev: PointerEvent) => any) | null;
    onpointerenter: ((this: GlobalEventHandlers, ev: PointerEvent) => any) | null;
    onpointerleave: ((this: GlobalEventHandlers, ev: PointerEvent) => any) | null;
    onpointermove: ((this: GlobalEventHandlers, ev: PointerEvent) => any) | null;
    onpointerout: ((this: GlobalEventHandlers, ev: PointerEvent) => any) | null;
    onpointerover: ((this: GlobalEventHandlers, ev: PointerEvent) => any) | null;
    onpointerup: ((this: GlobalEventHandlers, ev: PointerEvent) => any) | null;
    onprogress: ((this: GlobalEventHandlers, ev: ProgressEvent<EventTarget>) => any) | null;
    onratechange: ((this: GlobalEventHandlers, ev: Event) => any) | null;
    onreset: ((this: GlobalEventHandlers, ev: Event) => any) | null;
    onresize: ((this: GlobalEventHandlers, ev: UIEvent) => any) | null;
    onscroll: ((this: GlobalEventHandlers, ev: Event) => any) | null;
    onsecuritypolicyviolation: ((this: GlobalEventHandlers, ev: SecurityPolicyViolationEvent) => any) | null;
    onseeked: ((this: GlobalEventHandlers, ev: Event) => any) | null;
    onseeking: ((this: GlobalEventHandlers, ev: Event) => any) | null;
    onselect: ((this: GlobalEventHandlers, ev: Event) => any) | null;
    onselectionchange: ((this: GlobalEventHandlers, ev: Event) => any) | null;
    onselectstart: ((this: GlobalEventHandlers, ev: Event) => any) | null;
    onslotchange: ((this: GlobalEventHandlers, ev: Event) => any) | null;
    onstalled: ((this: GlobalEventHandlers, ev: Event) => any) | null;
    onsubmit: ((this: GlobalEventHandlers, ev: SubmitEvent) => any) | null;
    onsuspend: ((this: GlobalEventHandlers, ev: Event) => any) | null;
    ontimeupdate: ((this: GlobalEventHandlers, ev: Event) => any) | null;
    ontoggle: ((this: GlobalEventHandlers, ev: Event) => any) | null;
    ontouchcancel?: ((this: GlobalEventHandlers, ev: TouchEvent) => any) | null | undefined;
    ontouchend?: ((this: GlobalEventHandlers, ev: TouchEvent) => any) | null | undefined;
    ontouchmove?: ((this: GlobalEventHandlers, ev: TouchEvent) => any) | null | undefined;
    ontouchstart?: ((this: GlobalEventHandlers, ev: TouchEvent) => any) | null | undefined;
    ontransitioncancel: ((this: GlobalEventHandlers, ev: TransitionEvent) => any) | null;
    ontransitionend: ((this: GlobalEventHandlers, ev: TransitionEvent) => any) | null;
    ontransitionrun: ((this: GlobalEventHandlers, ev: TransitionEvent) => any) | null;
    ontransitionstart: ((this: GlobalEventHandlers, ev: TransitionEvent) => any) | null;
    onvolumechange: ((this: GlobalEventHandlers, ev: Event) => any) | null;
    onwaiting: ((this: GlobalEventHandlers, ev: Event) => any) | null;
    onwebkitanimationend: ((this: GlobalEventHandlers, ev: Event) => any) | null;
    onwebkitanimationiteration: ((this: GlobalEventHandlers, ev: Event) => any) | null;
    onwebkitanimationstart: ((this: GlobalEventHandlers, ev: Event) => any) | null;
    onwebkittransitionend: ((this: GlobalEventHandlers, ev: Event) => any) | null;
    onwheel: ((this: GlobalEventHandlers, ev: WheelEvent) => any) | null;
    autofocus: boolean;
    readonly dataset: DOMStringMap;
    blur: () => void;
    focus: (options?: FocusOptions | undefined) => void;
    responsiveSteps: import("@vaadin/form-layout/vaadin-form-layout.js").FormLayoutResponsiveStep[];
} & {}>, "theme">> & {
    theme?: string | undefined;
} & React.RefAttributes<FormLayoutElement>) => React.ReactElement<any, string | React.JSXElementConstructor<any>> | null;
//# sourceMappingURL=FormLayout.d.ts.map
import { EventName, WebComponentProps as _WebComponentProps } from '@lit-labs/react';
import type { ThemePropertyMixinClass } from '@vaadin/vaadin-themable-mixin/vaadin-theme-property-mixin.js';
import type React from 'react';
import type { RefAttributes } from 'react';
export type EventNames = Record<string, EventName | string>;
type Constructor<T> = {
    new (): T;
    name: string;
};
type PolymerConstructor<T> = Constructor<T> & {
    _properties: Record<string, unknown>;
};
type Options<I extends HTMLElement, E extends EventNames = {}> = Readonly<{
    displayName?: string;
    elementClass: Constructor<I> | PolymerConstructor<I>;
    events?: E;
    react: typeof window.React;
    tagName: string;
}>;
export type ThemedWebComponentProps<I extends ThemePropertyMixinClass & HTMLElement, E extends EventNames = {}> = Partial<Omit<_WebComponentProps<I, E>, 'theme'>> & {
    /**
     * Remove the deprecation warning for React components. In our case, the
     * property is deprecated in favor of an attribute. However, for React, it
     * does not matter if an attribute or a property is set; the same algorithm
     * will be used.
     *
     * @see ThemePropertyMixinClass#theme
     */
    theme?: string;
};
export type WebComponentProps<I extends HTMLElement, E extends EventNames = {}> = I extends ThemePropertyMixinClass ? ThemedWebComponentProps<I, E> : _WebComponentProps<I, E>;
export declare function createComponent<I extends HTMLElement, E extends EventNames = {}>(options: Options<I, E>): (props: WebComponentProps<I, E> & RefAttributes<I>) => React.ReactElement | null;
export {};
//# sourceMappingURL=createComponent.d.ts.map
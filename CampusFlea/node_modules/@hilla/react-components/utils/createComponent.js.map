{"version":3,"file":"createComponent.js","sourceRoot":"","sources":["../src/utils/createComponent.ts"],"names":[],"mappings":"AAAA,OAAO,EACL,eAAe,IAAI,gBAAgB,GAIpC,MAAM,iBAAiB,CAAC;AAKzB,MAAM,IAAI,GAAG,MAAa,CAAC;AAC3B,IAAI,CAAC,MAAM,GAAG,IAAI,CAAC,MAAM,IAAI,EAAE,CAAC;AAChC,IAAI,CAAC,MAAM,CAAC,aAAa,GAAG,IAAI,CAAC,MAAM,CAAC,aAAa,IAAI,EAAE,CAAC;AAC5D,IAAI,CAAC,MAAM,CAAC,aAAa,CAAC,IAAI,CAAC;IAC7B,EAAE,EAAE,yBAAyB;IAC7B,OAAO,EAAE,uBAAuB,CAAC,OAAO;CACzC,CAAC,CAAC;AAsCH,MAAM,UAAU,eAAe,CAAmD,OAAsB;IACtG,MAAM,EAAE,YAAY,EAAE,GAAG,OAAO,CAAC;IAEjC,OAAO,gBAAgB,CACrB,aAAa,IAAI,YAAY;QAC3B,CAAC,CAAC;YACE,GAAG,OAAO;YACV,iDAAiD;YACjD,wEAAwE;YACxE,yEAAyE;YACzE,gEAAgE;YAChE,iBAAiB;YACjB,YAAY,EAAE;gBACZ,qEAAqE;gBACrE,IAAI,EAAE,YAAY,CAAC,IAAI;gBACvB,SAAS,EAAE,YAAY,CAAC,WAAW;aACpC;SACF;QACH,CAAC,CAAC,OAAO,CACZ,CAAC;AACJ,CAAC","sourcesContent":["import {\n  createComponent as _createComponent,\n  EventName,\n  WebComponentProps as _WebComponentProps,\n  ReactWebComponent as _ReactWebComponent,\n} from '@lit-labs/react';\nimport type { ThemePropertyMixinClass } from '@vaadin/vaadin-themable-mixin/vaadin-theme-property-mixin.js';\nimport type React from 'react';\nimport type { ForwardRefExoticComponent, RefAttributes } from 'react';\n\nconst $wnd = window as any;\n$wnd.Vaadin = $wnd.Vaadin || {};\n$wnd.Vaadin.registrations = $wnd.Vaadin.registrations || [];\n$wnd.Vaadin.registrations.push({\n  is: '@hilla/react-components',\n  version: /* updated-by-script */ '2.1.7',\n});\n\n// TODO: Remove when types from @lit-labs/react are exported\nexport type EventNames = Record<string, EventName | string>;\ntype Constructor<T> = { new (): T; name: string };\ntype PolymerConstructor<T> = Constructor<T> & { _properties: Record<string, unknown> };\ntype Options<I extends HTMLElement, E extends EventNames = {}> = Readonly<{\n  displayName?: string;\n  elementClass: Constructor<I> | PolymerConstructor<I>;\n  events?: E;\n  react: typeof window.React;\n  tagName: string;\n}>;\n\nexport type ThemedWebComponentProps<\n  I extends ThemePropertyMixinClass & HTMLElement,\n  E extends EventNames = {},\n> = Partial<Omit<_WebComponentProps<I, E>, 'theme'>> & {\n  /**\n   * Remove the deprecation warning for React components. In our case, the\n   * property is deprecated in favor of an attribute. However, for React, it\n   * does not matter if an attribute or a property is set; the same algorithm\n   * will be used.\n   *\n   * @see ThemePropertyMixinClass#theme\n   */\n  theme?: string;\n};\n\nexport type WebComponentProps<I extends HTMLElement, E extends EventNames = {}> = I extends ThemePropertyMixinClass\n  ? ThemedWebComponentProps<I, E>\n  : _WebComponentProps<I, E>;\n\n// We need a separate declaration here; otherwise, the TypeScript fails into the\n// endless loop trying to resolve the typings.\nexport function createComponent<I extends HTMLElement, E extends EventNames = {}>(\n  options: Options<I, E>,\n): (props: WebComponentProps<I, E> & RefAttributes<I>) => React.ReactElement | null;\nexport function createComponent<I extends HTMLElement, E extends EventNames = {}>(options: Options<I, E>): any {\n  const { elementClass } = options;\n\n  return _createComponent(\n    '_properties' in elementClass\n      ? {\n          ...options,\n          // TODO: improve or remove the Polymer workaround\n          // 'createComponent' relies on key presence on the custom element class,\n          // but Polymer defines properties on the prototype when the first element\n          // is created. Workaround: pass a mock object with properties in\n          // the prototype.\n          elementClass: {\n            // @ts-expect-error: it is a specific workaround for Polymer classes.\n            name: elementClass.name,\n            prototype: elementClass._properties,\n          },\n        }\n      : options,\n  );\n}\n"]}
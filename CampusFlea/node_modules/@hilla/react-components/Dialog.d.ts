import { type ComponentType, type ReactNode } from 'react';
import { type DialogElement, type DialogProps as _DialogProps } from './generated/Dialog.js';
import type { ReactSimpleRendererProps } from './renderers/useSimpleRenderer.js';
export * from './generated/Dialog.js';
export type DialogReactRendererProps = ReactSimpleRendererProps<DialogElement>;
export type DialogProps = Partial<Omit<_DialogProps, 'children' | 'footerRenderer' | 'headerRenderer' | 'renderer'>> & Readonly<{
    children?: ReactNode | ComponentType<DialogReactRendererProps>;
    footer?: ReactNode;
    footerRenderer?: ComponentType<DialogReactRendererProps> | null;
    header?: ReactNode;
    headerRenderer?: ComponentType<DialogReactRendererProps> | null;
    renderer?: ComponentType<DialogReactRendererProps> | null;
}>;
declare const ForwardedDialog: import("react").ForwardRefExoticComponent<Partial<Omit<import("./utils/createComponent.js").ThemedWebComponentProps<DialogElement, Readonly<{
    onOpenedChanged: import("@lit-labs/react").EventName<import("@vaadin/dialog/src/vaadin-dialog.js").DialogOpenedChangedEvent>;
}>>, "children" | "renderer" | "headerRenderer" | "footerRenderer">> & Readonly<{
    children?: ReactNode | ComponentType<DialogReactRendererProps>;
    footer?: ReactNode;
    footerRenderer?: ComponentType<Readonly<{
        original: DialogElement;
    }>> | null | undefined;
    header?: ReactNode;
    headerRenderer?: ComponentType<Readonly<{
        original: DialogElement;
    }>> | null | undefined;
    renderer?: ComponentType<Readonly<{
        original: DialogElement;
    }>> | null | undefined;
}> & import("react").RefAttributes<DialogElement>>;
export { ForwardedDialog as Dialog };
//# sourceMappingURL=Dialog.d.ts.map
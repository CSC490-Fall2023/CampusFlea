import { type ComponentType, type ReactElement, type RefAttributes } from 'react';
import { type GridElement, type GridProps as _GridProps } from './generated/Grid.js';
import type { GridRowDetailsReactRendererProps } from './renderers/grid.js';
export * from '@vaadin/grid/src/vaadin-grid.js';
export { GridElement, type GridEventMap } from './generated/Grid.js';
export type GridProps<TItem> = Partial<Omit<_GridProps<TItem>, 'rowDetailsRenderer'>> & Readonly<{
    rowDetailsRenderer?: ComponentType<GridRowDetailsReactRendererProps<TItem>> | null;
}>;
declare const ForwardedGrid: <TItem = any>(props: Partial<Omit<import("./utils/createComponent.js").ThemedWebComponentProps<GridElement<TItem>, Readonly<{
    onActiveItemChanged: import("@lit-labs/react").EventName<import("@vaadin/grid/src/vaadin-grid.js").GridActiveItemChangedEvent<TItem>>;
    onCellActivate: import("@lit-labs/react").EventName<import("@vaadin/grid/src/vaadin-grid.js").GridCellActivateEvent<TItem>>;
    onColumnResize: import("@lit-labs/react").EventName<import("@vaadin/grid/src/vaadin-grid.js").GridColumnResizeEvent<TItem>>;
    onExpandedItemsChanged: import("@lit-labs/react").EventName<import("@vaadin/grid/src/vaadin-grid.js").GridExpandedItemsChangedEvent<TItem>>;
    onLoadingChanged: import("@lit-labs/react").EventName<import("@vaadin/grid/src/vaadin-grid.js").GridLoadingChangedEvent>;
    onSelectedItemsChanged: import("@lit-labs/react").EventName<import("@vaadin/grid/src/vaadin-grid.js").GridSelectedItemsChangedEvent<TItem>>;
    onCellFocus: import("@lit-labs/react").EventName<import("@vaadin/grid/src/vaadin-grid.js").GridCellFocusEvent<TItem>>;
    onColumnReorder: import("@lit-labs/react").EventName<import("@vaadin/grid/src/vaadin-grid.js").GridColumnReorderEvent<TItem>>;
    onGridDragend: import("@lit-labs/react").EventName<Event>;
    onGridDragstart: import("@lit-labs/react").EventName<import("@vaadin/grid/src/vaadin-grid.js").GridDragStartEvent<TItem>>;
    onGridDrop: import("@lit-labs/react").EventName<import("@vaadin/grid/src/vaadin-grid.js").GridDropEvent<TItem>>;
    onSizeChanged: import("@lit-labs/react").EventName<CustomEvent<unknown>>;
    onDataProviderChanged: import("@lit-labs/react").EventName<CustomEvent<unknown>>;
}>>, "rowDetailsRenderer">> & Readonly<{
    rowDetailsRenderer?: ComponentType<Readonly<{
        item: TItem;
        model: import("@vaadin/grid/src/vaadin-grid.js").GridItemModel<TItem>;
        original: GridElement<TItem>;
    }>> | null | undefined;
}> & RefAttributes<GridElement<TItem>>) => ReactElement | null;
export { ForwardedGrid as Grid };
//# sourceMappingURL=Grid.d.ts.map
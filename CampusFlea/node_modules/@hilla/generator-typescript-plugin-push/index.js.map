{"version":3,"file":"index.js","sourceRoot":"","sources":["src/index.ts"],"names":[],"mappings":"AAAA,OAAO,MAAM,MAAM,4CAA4C,CAAC;AAIhE,OAAO,EAA2B,aAAa,EAAE,MAAM,oBAAoB,CAAC;AAK5E,MAAM,gBAAgB,GAAsB;IAC1C,sCAAsC;IACtC,sDAAsD;CACvD,CAAC;AAEF,MAAM,CAAC,OAAO,OAAO,UAAW,SAAQ,MAAM;IAC5C;;OAEG;IACH,MAAM,CAAC,wBAAwB,CAAC,KAAgD;QAC9E,OAAO,MAAM,CAAC,OAAO,CAAC,KAAK,CAAC,CAAC,MAAM,CAAC,CAAC,GAAG,EAAE,CAAC,GAAG,EAAE,IAAI,CAAC,EAAE,EAAE;YACvD,MAAM,QAAQ,GAAG,IAAI,EAAE,IAAI,EAAE,SAAS,CAAC,GAAG,CAA6D,CAAC;YACxG,MAAM,MAAM,GAAG,QAAQ,EAAE,OAAO,EAAE,CAAC,kBAAkB,CAAC,EAAE,MAA6C,CAAC;YACtG,MAAM,SAAS,GAAG,MAAM,EAAE,CAAC,cAAc,CAAC,CAAC;YAC3C,MAAM,CAAC,EAAE,QAAQ,EAAE,MAAM,CAAC,GAAG,GAAG,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC;YAE5C,IAAI,SAAS,IAAI,gBAAgB,CAAC,QAAQ,CAAC,SAAS,CAAC,EAAE;gBACrD,IAAI,GAAG,CAAC,GAAG,CAAC,QAAQ,CAAC,EAAE;oBACrB,GAAG,CAAC,GAAG,CAAC,QAAQ,CAAE,CAAC,cAAc,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC;iBAChD;qBAAM;oBACL,GAAG,CAAC,GAAG,CAAC,QAAQ,EAAE,EAAE,cAAc,EAAE,CAAC,MAAM,CAAC,EAAE,gBAAgB,EAAE,IAAI,EAAE,CAAC,CAAC;iBACzE;aACF;iBAAM;gBACL,8DAA8D;gBAC9D,wCAAwC;gBACxC,IAAI,GAAG,CAAC,GAAG,CAAC,QAAQ,CAAC,EAAE;oBACrB,GAAG,CAAC,GAAG,CAAC,QAAQ,CAAE,CAAC,gBAAgB,GAAG,KAAK,CAAC;iBAC7C;qBAAM;oBACL,GAAG,CAAC,GAAG,CAAC,QAAQ,EAAE,EAAE,cAAc,EAAE,EAAE,EAAE,gBAAgB,EAAE,KAAK,EAAE,CAAC,CAAC;iBACpE;aACF;YAED,OAAO,GAAG,CAAC;QACb,CAAC,EAAE,IAAI,GAAG,EAA8B,CAAC,CAAC;IAC5C,CAAC;IAID,IAAa,IAAI;QACf,OAAO,MAAM,CAAC,IAAI,CAAC,GAAG,CAAC;IACzB,CAAC;IAEQ,KAAK,CAAC,OAAO,CAAC,OAAsB;QAC3C,MAAM,EAAE,GAAG,EAAE,OAAO,EAAE,GAAG,OAAO,CAAC;QACjC,MAAM,iBAAiB,GAAG,IAAI,CAAC,WAAW,CAAC,wBAAwB,CAAC,GAAG,CAAC,KAAK,CAAC,CAAC;QAE/E,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,OAAO,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE;YACvC,MAAM,EAAE,QAAQ,EAAE,GAAG,OAAO,CAAC,CAAC,CAAC,CAAC;YAChC,MAAM,QAAQ,GAAG,QAAQ,CAAC,SAAS,CAAC,CAAC,EAAE,QAAQ,CAAC,OAAO,CAAC,KAAK,CAAC,CAAC,CAAC;YAEhE,IAAI,iBAAiB,CAAC,GAAG,CAAC,QAAQ,CAAC,EAAE;gBACnC,OAAO,CAAC,CAAC,CAAC,GAAG,IAAI,aAAa,CAAC,OAAO,CAAC,CAAC,CAAC,EAAE,iBAAiB,CAAC,GAAG,CAAC,QAAQ,CAAE,CAAC,CAAC,OAAO,EAAE,CAAC;aACxF;SACF;IACH,CAAC;CACF","sourcesContent":["import Plugin from '@hilla/generator-typescript-core/Plugin.js';\nimport type SharedStorage from '@hilla/generator-typescript-core/SharedStorage.js';\nimport type { OpenAPIV3 } from 'openapi-types';\nimport type { ReadonlyObjectDeep } from 'type-fest/source/readonly-deep';\nimport { type EndpointOperations, PushProcessor } from './PushProcessor.js';\n\ntype ExtendedMediaTypeSchema = Readonly<{ 'x-class-name': string }> &\n  ReadonlyObjectDeep<OpenAPIV3.ReferenceObject | OpenAPIV3.SchemaObject>;\n\nconst classesToReplace: readonly string[] = [\n  'dev.hilla.runtime.transfertypes.Flux',\n  'dev.hilla.runtime.transfertypes.EndpointSubscription',\n];\n\nexport default class PushPlugin extends Plugin {\n  /**\n   * Collects methods that must be patched by checking their `x-class-name` value\n   */\n  static #collectPatchableMethods(paths: ReadonlyObjectDeep<OpenAPIV3.PathsObject>) {\n    return Object.entries(paths).reduce((acc, [key, path]) => {\n      const response = path?.post?.responses[200] as ReadonlyObjectDeep<OpenAPIV3.ResponseObject> | undefined;\n      const schema = response?.content?.['application/json']?.schema as ExtendedMediaTypeSchema | undefined;\n      const className = schema?.['x-class-name'];\n      const [, endpoint, method] = key.split('/');\n\n      if (className && classesToReplace.includes(className)) {\n        if (acc.has(endpoint)) {\n          acc.get(endpoint)!.methodsToPatch.push(method);\n        } else {\n          acc.set(endpoint, { methodsToPatch: [method], removeInitImport: true });\n        }\n      } else {\n        // Not all methods will be patched, let's keep the init import\n        // eslint-disable-next-line no-lonely-if\n        if (acc.has(endpoint)) {\n          acc.get(endpoint)!.removeInitImport = false;\n        } else {\n          acc.set(endpoint, { methodsToPatch: [], removeInitImport: false });\n        }\n      }\n\n      return acc;\n    }, new Map<string, EndpointOperations>());\n  }\n\n  declare ['constructor']: typeof PushPlugin;\n\n  override get path(): string {\n    return import.meta.url;\n  }\n\n  override async execute(storage: SharedStorage): Promise<void> {\n    const { api, sources } = storage;\n    const endpointMethodMap = this.constructor.#collectPatchableMethods(api.paths);\n\n    for (let i = 0; i < sources.length; i++) {\n      const { fileName } = sources[i];\n      const endpoint = fileName.substring(0, fileName.indexOf('.ts'));\n\n      if (endpointMethodMap.has(endpoint)) {\n        sources[i] = new PushProcessor(sources[i], endpointMethodMap.get(endpoint)!).process();\n      }\n    }\n  }\n}\n"]}
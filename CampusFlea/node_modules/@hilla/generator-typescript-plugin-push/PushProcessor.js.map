{"version":3,"file":"PushProcessor.js","sourceRoot":"","sources":["src/PushProcessor.ts"],"names":[],"mappings":"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","sourcesContent":["import createSourceFile from '@hilla/generator-typescript-utils/createSourceFile.js';\nimport DependencyManager from '@hilla/generator-typescript-utils/dependencies/DependencyManager.js';\nimport PathManager from '@hilla/generator-typescript-utils/dependencies/PathManager.js';\nimport memoize from '@hilla/generator-typescript-utils/memoize.js';\nimport ts from 'typescript';\n\nconst initParameterTypeName = 'EndpointRequestInit';\n\nexport type EndpointOperations = {\n  methodsToPatch: string[];\n  removeInitImport: boolean;\n};\n\nexport class PushProcessor {\n  readonly #dependencies = new DependencyManager(new PathManager({ extension: '.js' }));\n  readonly #operations: EndpointOperations;\n  readonly #source: ts.SourceFile;\n  readonly #subscriptionId: () => ts.Identifier;\n\n  constructor(source: ts.SourceFile, operations: EndpointOperations) {\n    this.#operations = operations;\n    this.#source = source;\n\n    const { imports, paths } = this.#dependencies;\n\n    this.#dependencies.imports.fromCode(source);\n    this.#subscriptionId = memoize(() =>\n      imports.named.add(paths.createBareModulePath('@hilla/frontend', false), 'Subscription'),\n    );\n  }\n\n  process(): ts.SourceFile {\n    const otherStatements = this.#source.statements\n      .filter((statement) => !ts.isImportDeclaration(statement))\n      .map((statement) => {\n        if (ts.isFunctionDeclaration(statement)) {\n          const functionName = statement.name?.text;\n\n          // Checks if the method is in the list of methods to patch\n          if (functionName && this.#operations.methodsToPatch.includes(functionName)) {\n            return this.#updateFunction(statement);\n          }\n        }\n\n        return statement;\n      });\n\n    let importStatements = this.#dependencies.imports.toCode();\n\n    if (this.#operations.removeInitImport) {\n      const importHillaFrontend = importStatements.find(\n        (statement) =>\n          ts.isImportDeclaration(statement) &&\n          (statement.moduleSpecifier as ts.StringLiteral).text === '@hilla/frontend',\n      );\n\n      if (importHillaFrontend) {\n        const updatedImportStatement = this.#removeInitImport(importHillaFrontend as ts.ImportDeclaration);\n\n        if (updatedImportStatement) {\n          importStatements = importStatements.map((statement) => {\n            if (statement === importHillaFrontend) {\n              return updatedImportStatement;\n            }\n\n            return statement;\n          });\n        }\n      }\n    }\n\n    const updatedStatements: readonly ts.Statement[] = [...importStatements, ...otherStatements];\n\n    return createSourceFile(updatedStatements, this.#source.fileName);\n  }\n\n  #doesInitParameterExist(parameters: ts.NodeArray<ts.ParameterDeclaration>): boolean {\n    const last = parameters[parameters.length - 1];\n    const lastType = last.type as ts.TypeReferenceNode;\n    const lastTypeName = lastType.typeName as ts.Identifier;\n\n    return lastTypeName.text === initParameterTypeName;\n  }\n\n  #removeInitImport = (importStatement: ts.ImportDeclaration): ts.Statement | undefined => {\n    const namedImports = importStatement.importClause?.namedBindings;\n    if (namedImports && ts.isNamedImports(namedImports)) {\n      const updatedElements = namedImports.elements.filter((element) => element.name.text !== 'EndpointRequestInit');\n\n      const updatedImportClause = ts.factory.updateImportClause(\n        importStatement.importClause,\n        false, // FIXME: could be true, but it is false for regular endpoint calls, so sticking to that for now\n        undefined,\n        ts.factory.createNamedImports(updatedElements),\n      );\n\n      return ts.factory.updateImportDeclaration(\n        importStatement,\n        undefined,\n        updatedImportClause,\n        importStatement.moduleSpecifier,\n        undefined,\n      );\n    }\n\n    return undefined;\n  };\n\n  /**\n   * Replace returned `Promise<Array<T>>` by the `Subscription<T>` type\n   * @param declaration -\n   */\n  #replacePromiseType(declaration: ts.FunctionDeclaration) {\n    const promiseType = (declaration.type as ts.TypeReferenceNode).typeArguments![0];\n    const promiseArray = (ts.isUnionTypeNode(promiseType) ? promiseType.types[0] : promiseType) as ts.TypeReferenceNode;\n\n    return ts.factory.createTypeReferenceNode(this.#subscriptionId(), promiseArray.typeArguments);\n  }\n\n  #updateFunction(declaration: ts.FunctionDeclaration): ts.FunctionDeclaration {\n    const { parameters } = declaration;\n    const doesInitParameterExist = this.#doesInitParameterExist(parameters);\n\n    return ts.factory.createFunctionDeclaration(\n      undefined, // no async\n      declaration.asteriskToken,\n      declaration.name,\n      declaration.typeParameters,\n      // Remove the `init` parameter\n      doesInitParameterExist ? parameters.slice(0, -1) : parameters,\n      this.#replacePromiseType(declaration),\n      this.#updateFunctionBody(declaration, doesInitParameterExist),\n    );\n  }\n\n  #updateFunctionBody(declaration: ts.FunctionDeclaration, doesInitParameterExist: boolean): ts.Block {\n    const returnStatement = declaration.body!.statements[0] as ts.ReturnStatement;\n    const { arguments: args, expression, typeArguments } = returnStatement.expression! as ts.CallExpression;\n    const call = expression as ts.PropertyAccessExpression;\n\n    return ts.factory.createBlock([\n      ts.factory.createReturnStatement(\n        ts.factory.createCallExpression(\n          ts.factory.createPropertyAccessExpression(\n            call.expression,\n            // `subscribe` instead of `call`\n            ts.factory.createIdentifier('subscribe'),\n          ),\n          typeArguments,\n          // remove the `init` parameter\n          doesInitParameterExist ? args.slice(0, -1) : args,\n        ),\n      ),\n    ]);\n  }\n}\n"]}
{
  "version": 3,
  "sources": ["src/CsrfUtils.ts"],
  "sourcesContent": ["import CookieManager from './CookieManager.js';\n\n/** @internal */\nexport const VAADIN_CSRF_HEADER = 'X-CSRF-Token';\n/** @internal */\nexport const VAADIN_CSRF_COOKIE_NAME = 'csrfToken';\n/** @internal */\nexport const SPRING_CSRF_COOKIE_NAME = 'XSRF-TOKEN';\n\nfunction extractContentFromMetaTag(element: HTMLMetaElement | null): string | undefined {\n  if (element) {\n    const value = element.content;\n    if (value && value.toLowerCase() !== 'undefined') {\n      return value;\n    }\n  }\n  return undefined;\n}\n\n/** @internal */\nfunction getSpringCsrfHeaderFromMetaTag(doc: Document): string | undefined {\n  const csrfHeader = doc.head.querySelector<HTMLMetaElement>('meta[name=\"_csrf_header\"]');\n  return extractContentFromMetaTag(csrfHeader);\n}\n\n/** @internal */\nfunction getSpringCsrfTokenFromMetaTag(doc: Document): string | undefined {\n  const csrfToken = doc.head.querySelector<HTMLMetaElement>('meta[name=\"_csrf\"]');\n  return extractContentFromMetaTag(csrfToken);\n}\n\n/** @internal */\nexport function getSpringCsrfInfo(doc: Document): Record<string, string> {\n  const csrfHeader = getSpringCsrfHeaderFromMetaTag(doc);\n  let csrf = CookieManager.get(SPRING_CSRF_COOKIE_NAME);\n  if (!csrf || csrf.length === 0) {\n    csrf = getSpringCsrfTokenFromMetaTag(doc);\n  }\n  const headers: Record<string, string> = {};\n  if (csrf && csrfHeader) {\n    headers._csrf = csrf;\n    // eslint-disable-next-line camelcase\n    headers._csrf_header = csrfHeader;\n  }\n  return headers;\n}\n\n/** @internal */\nexport function getSpringCsrfTokenHeadersForAuthRequest(doc: Document): Record<string, string> {\n  const csrfInfo = getSpringCsrfInfo(doc);\n  const headers: Record<string, string> = {};\n  if (csrfInfo._csrf && csrfInfo._csrf_header) {\n    headers[csrfInfo._csrf_header] = csrfInfo._csrf;\n  }\n  return headers;\n}\n\n/** @internal */\nexport function getCsrfTokenHeadersForEndpointRequest(doc: Document): Record<string, string> {\n  const headers: Record<string, string> = {};\n\n  const csrfInfo = getSpringCsrfInfo(doc);\n  if (csrfInfo._csrf && csrfInfo._csrf_header) {\n    headers[csrfInfo._csrf_header] = csrfInfo._csrf;\n  } else {\n    headers[VAADIN_CSRF_HEADER] = CookieManager.get(VAADIN_CSRF_COOKIE_NAME) ?? '';\n  }\n\n  return headers;\n}\n"],
  "mappings": "AAAA,OAAOA,MAAmB,qBAGnB,MAAMC,EAAqB,eAErBC,EAA0B,YAE1BC,EAA0B,aAEvC,SAASC,EAA0BC,EAAqD,CACtF,GAAIA,EAAS,CACX,MAAMC,EAAQD,EAAQ,QACtB,GAAIC,GAASA,EAAM,YAAY,IAAM,YACnC,OAAOA,CAEX,CAEF,CAGA,SAASC,EAA+BC,EAAmC,CACzE,MAAMC,EAAaD,EAAI,KAAK,cAA+B,2BAA2B,EACtF,OAAOJ,EAA0BK,CAAU,CAC7C,CAGA,SAASC,EAA8BF,EAAmC,CACxE,MAAMG,EAAYH,EAAI,KAAK,cAA+B,oBAAoB,EAC9E,OAAOJ,EAA0BO,CAAS,CAC5C,CAGO,SAASC,EAAkBJ,EAAuC,CACvE,MAAMC,EAAaF,EAA+BC,CAAG,EACrD,IAAIK,EAAOb,EAAc,IAAIG,CAAuB,GAChD,CAACU,GAAQA,EAAK,SAAW,KAC3BA,EAAOH,EAA8BF,CAAG,GAE1C,MAAMM,EAAkC,CAAC,EACzC,OAAID,GAAQJ,IACVK,EAAQ,MAAQD,EAEhBC,EAAQ,aAAeL,GAElBK,CACT,CAGO,SAASC,EAAwCP,EAAuC,CAC7F,MAAMQ,EAAWJ,EAAkBJ,CAAG,EAChCM,EAAkC,CAAC,EACzC,OAAIE,EAAS,OAASA,EAAS,eAC7BF,EAAQE,EAAS,YAAY,EAAIA,EAAS,OAErCF,CACT,CAGO,SAASG,EAAsCT,EAAuC,CAC3F,MAAMM,EAAkC,CAAC,EAEnCE,EAAWJ,EAAkBJ,CAAG,EACtC,OAAIQ,EAAS,OAASA,EAAS,aAC7BF,EAAQE,EAAS,YAAY,EAAIA,EAAS,MAE1CF,EAAQb,CAAkB,EAAID,EAAc,IAAIE,CAAuB,GAAK,GAGvEY,CACT",
  "names": ["CookieManager", "VAADIN_CSRF_HEADER", "VAADIN_CSRF_COOKIE_NAME", "SPRING_CSRF_COOKIE_NAME", "extractContentFromMetaTag", "element", "value", "getSpringCsrfHeaderFromMetaTag", "doc", "csrfHeader", "getSpringCsrfTokenFromMetaTag", "csrfToken", "getSpringCsrfInfo", "csrf", "headers", "getSpringCsrfTokenHeadersForAuthRequest", "csrfInfo", "getCsrfTokenHeadersForEndpointRequest"]
}

import C from"./CookieManager.js";import{getSpringCsrfInfo as k,getSpringCsrfTokenHeadersForAuthRequest as c,VAADIN_CSRF_HEADER as S}from"./CsrfUtils.js";const y="jwt.headerAndPayload";function M(n){const e=new DOMParser().parseFromString(n,"text/html");return k(e)}function g(){Array.from(document.head.querySelectorAll('meta[name="_csrf"], meta[name="_csrf_header"]')).forEach(n=>n.remove())}function u(n){g();const e=document.createElement("meta");e.name="_csrf_header",e.content=n._csrf_header,document.head.appendChild(e);const r=document.createElement("meta");r.name="_csrf",r.content=n._csrf,document.head.appendChild(r)}const T=n=>{const e=/window\.Vaadin = \{TypeScript: \{"csrfToken":"([0-9a-zA-Z\\-]{36})"\}\};/iu.exec(n);return e?e[1]:void 0};async function R(n){const e=await n.text(),r=T(e),t=M(e);return u(t),r}async function f(n,e){const r=await fetch(n,{headers:e,method:"POST"});if(!r.ok)throw new Error(`failed to logout with response ${r.status}`);await R(r)}async function O(n,e,r){try{const t=new FormData;t.append("username",n),t.append("password",e);const a=r?.loginProcessingUrl??"login",o=c(document);o.source="typescript";const s=await fetch(a,{body:t,headers:o,method:"POST"}),p=s.headers.get("Result"),m=s.headers.get("Saved-url")??void 0,h=s.headers.get("Default-url")??void 0;if(s.ok&&p==="success"){const w=s.headers.get("Vaadin-CSRF")??void 0,d=s.headers.get("Spring-CSRF-header")??void 0,l=s.headers.get("Spring-CSRF-token")??void 0;if(d&&l){const i={};i._csrf=l,i._csrf_header=d,u(i)}return{defaultUrl:h,error:!1,redirectUrl:m,token:w}}return{error:!0,errorMessage:"Check that you have entered the correct username and password and try again.",errorTitle:"Incorrect username or password."}}catch(t){if(t instanceof Error)return{error:!0,errorMessage:t.message,errorTitle:t.name};throw t}}async function P(n){const e=n?.logoutUrl??"logout";try{const r=c(document);await f(e,r)}catch{try{const t=await(await fetch("?nocache")).text(),a=new DOMParser().parseFromString(t,"text/html"),o=c(a);await f(e,o)}catch(r){throw g(),r}}finally{C.remove(y)}}class I{onInvalidSessionCallback;constructor(e){this.onInvalidSessionCallback=e}async invoke(e,r){const t={...e};t.request=e.request.clone();const a=await r(e);if(a.status===401){const o=await this.onInvalidSessionCallback();if(o.token)return t.request.headers.set(S,o.token),r(t)}return a}}export{I as InvalidSessionMiddleware,O as login,P as logout};
//# sourceMappingURL=Authentication.js.map

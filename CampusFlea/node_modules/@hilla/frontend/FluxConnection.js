import p from"atmosphere.js";import{getCsrfTokenHeadersForEndpointRequest as l}from"./CsrfUtils.js";import{isClientMessage as h}from"./FluxMessages.js";var u=(n=>(n.ACTIVE="active",n.INACTIVE="inactive",n))(u||{});class E extends EventTarget{state="inactive";#e=new Map;#a=0;#t=new Map;#n=new Map;#s=new Map;#i=[];#c;constructor(e){super(),this.#l(e.replace("/connect","").replace(/^connect/u,""))}subscribe(e,n,s){const t=this.#a.toString();this.#a+=1;const r=s??[],a={"@type":"subscribe",endpointName:e,id:t,methodName:n,params:r},c=`${e}.${n}(${JSON.stringify(r)})`;this.#r(a),this.#e.set(t,c);const o={cancel:()=>{if(!this.#e.has(t))return;const i={"@type":"unsubscribe",id:t};this.#r(i),this.#o(t)},context(i){return i.addController({hostDisconnected(){o.cancel()}}),o},onComplete:i=>(this.#t.set(t,i),o),onError:i=>(this.#n.set(t,i),o),onNext:i=>(this.#s.set(t,i),o)};return o}#l(e){const n=l(document);this.#c=p.subscribe?.({contentType:"application/json; charset=UTF-8",enableProtocol:!0,fallbackTransport:"long-polling",headers:n,maxReconnectOnClose:1e7,onClose:s=>{this.state==="active"&&(this.state="inactive",this.dispatchEvent(new CustomEvent("state-changed",{detail:{active:!1}})))},onError:s=>{console.error("error in push communication",s)},onMessage:s=>{s.responseBody&&this.#h(JSON.parse(s.responseBody))},onOpen:s=>{this.state==="inactive"&&(this.state="active",this.dispatchEvent(new CustomEvent("state-changed",{detail:{active:!0}})),this.#p())},onReopen:s=>{this.state==="inactive"&&(this.state="active",this.dispatchEvent(new CustomEvent("state-changed",{detail:{active:!0}})),this.#p())},reconnectInterval:5e3,timeout:-1,trackMessageLength:!0,transport:"websocket",url:e?`${e}/HILLA/push`:"HILLA/push"})}#h(e){if(h(e)){const{id:n}=e,s=this.#e.get(n)??"unknown";if(e["@type"]==="update"){const t=this.#s.get(n);t&&t(e.item)}else if(e["@type"]==="complete")this.#t.get(n)?.(),this.#o(n);else{const t=this.#n.get(n);if(t&&t(),this.#o(n),!t)throw new Error(`Error in ${s}: ${e.message}`)}}else throw new Error(`Unknown message from server: ${String(e)}`)}#o(e){this.#s.delete(e),this.#t.delete(e),this.#n.delete(e),this.#e.delete(e)}#r(e){this.state==="inactive"?this.#i.push(e):this.#c?.push?.(JSON.stringify(e))}#p(){this.#i.forEach(e=>this.#r(e)),this.#i=[]}}export{E as FluxConnection,u as State};
//# sourceMappingURL=FluxConnection.js.map

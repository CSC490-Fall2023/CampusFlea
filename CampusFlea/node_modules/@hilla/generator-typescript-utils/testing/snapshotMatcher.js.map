{"version":3,"file":"snapshotMatcher.js","sourceRoot":"","sources":["../src/testing/snapshotMatcher.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,QAAQ,EAAE,SAAS,EAAE,MAAM,kBAAkB,CAAC;AACvD,OAAO,EAAE,aAAa,EAAE,MAAM,UAAU,CAAC;AAEzC,MAAM,IAAI,GAAG,OAAO,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC;AACnC,MAAM,YAAY,GAAG,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,IAAI,IAAI,CAAC,QAAQ,CAAC,UAAU,CAAC,CAAC;AAWtE,MAAM,CAAC,OAAO,UAAU,eAAe,CAAC,IAAqB,EAAE,KAAqB;IAClF,KAAK,CAAC,SAAS,CACb,IAAI,CAAC,SAAS,CAAC,SAAS,EACxB,iBAAiB;IACjB,iDAAiD;IACjD,KAAK,UAAU,eAAe,CAAe,YAAoB,EAAE,aAAqB;QACtF,MAAM,GAAG,GAAG,KAAK,CAAC,IAAI,CAAC,IAAI,EAAE,QAAQ,CAAC,CAAC;QACvC,MAAM,WAAW,GAAG,IAAI,GAAG,CAAC,cAAc,YAAY,UAAU,EAAE,aAAa,CAAC,CAAC;QACjF,MAAM,YAAY,GAAG,aAAa,CAAC,WAAW,CAAC,CAAC;QAEhD,IAAI,YAAY,EAAE;YAChB,MAAM,SAAS,CAAC,YAAY,EAAE,GAAG,EAAE,MAAM,CAAC,CAAC;SAC5C;aAAM;YACL,IAAI,QAAQ,CAAC;YACb,IAAI;gBACF,QAAQ,GAAG,MAAM,QAAQ,CAAC,YAAY,EAAE,MAAM,CAAC,CAAC;aACjD;YAAC,OAAO,CAAC,EAAE;gBACV,MAAM,IAAI,KAAK,CACb,gCAAgC,WAAW,CAAC,QAAQ,EAAE,+CAA+C,CACtG,CAAC;aACH;YAED,IAAI,CAAC,MAAM,CAAC,KAAK,CAAC,GAAG,EAAE,QAAQ,CAAC,CAAC;SAClC;IACH,CAAC,CACF,CAAC;AACJ,CAAC","sourcesContent":["import { readFile, writeFile } from 'node:fs/promises';\nimport { fileURLToPath } from 'node:url';\n\nconst argv = process.argv.slice(2);\nconst shouldUpdate = argv.includes('-u') || argv.includes('--update');\n\ndeclare global {\n  // eslint-disable-next-line @typescript-eslint/no-namespace\n  export namespace Chai {\n    interface Assertion {\n      toMatchSnapshot(snapshotName: string, importMetaUrl: string): Promise<void>;\n    }\n  }\n}\n\nexport default function snapshotMatcher(chai: Chai.ChaiStatic, utils: Chai.ChaiUtils): void {\n  utils.addMethod(\n    chai.Assertion.prototype,\n    'toMatchSnapshot',\n    // eslint-disable-next-line prefer-arrow-callback\n    async function toMatchSnapshot(this: object, snapshotName: string, importMetaUrl: string): Promise<void> {\n      const obj = utils.flag(this, 'object');\n      const snapshotURL = new URL(`./fixtures/${snapshotName}.snap.ts`, importMetaUrl);\n      const snapshotPath = fileURLToPath(snapshotURL);\n\n      if (shouldUpdate) {\n        await writeFile(snapshotPath, obj, 'utf8');\n      } else {\n        let snapshot;\n        try {\n          snapshot = await readFile(snapshotPath, 'utf8');\n        } catch (e) {\n          throw new Error(\n            `Snapshot does not exist yet: ${snapshotURL.toString()}.\\nConsider running tests with --update flag.`,\n          );\n        }\n\n        chai.assert.equal(obj, snapshot);\n      }\n    },\n  );\n}\n"]}
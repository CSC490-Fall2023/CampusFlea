{"version":3,"file":"PathManager.js","sourceRoot":"","sources":["../src/dependencies/PathManager.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,KAAK,EAAE,MAAM,MAAM,CAAC;AAS7B,MAAM,CAAC,OAAO,OAAO,WAAW;IACrB,QAAQ,CAAgD;IAEjE,YAAY,OAA4B;QACtC,IAAI,SAA6B,CAAC;QAElC,IAAI,OAAO,EAAE,SAAS,EAAE;YACtB,SAAS,GAAG,OAAO,CAAC,SAAS,CAAC,UAAU,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,OAAO,CAAC,SAAS,CAAC,CAAC,CAAC,IAAI,OAAO,CAAC,SAAS,EAAE,CAAC;SAC7F;QAED,IAAI,CAAC,QAAQ,GAAG;YACd,GAAG,OAAO;YACV,SAAS;YACT,UAAU,EAAE,OAAO,EAAE,UAAU,IAAI,GAAG;SACvC,CAAC;IACJ,CAAC;IAED,IAAI,SAAS;QACX,OAAO,IAAI,CAAC,QAAQ,CAAC,SAAS,CAAC;IACjC,CAAC;IAED,oBAAoB,CAAC,IAAY,EAAE,MAAM,GAAG,KAAK;QAC/C,MAAM,EAAE,SAAS,EAAE,GAAG,IAAI,CAAC,QAAQ,CAAC;QAEpC,IAAI,SAAS,IAAI,MAAM,EAAE;YACvB,OAAO,GAAG,IAAI,IAAI,SAAS,EAAE,CAAC;SAC/B;QAED,OAAO,IAAI,CAAC;IACd,CAAC;IAED,kBAAkB,CAAC,IAAY,EAAE,UAAU,GAAG,IAAI,CAAC,QAAQ,CAAC,UAAU;QACpE,MAAM,EAAE,SAAS,EAAE,GAAG,IAAI,CAAC,QAAQ,CAAC;QACpC,IAAI,MAAM,GAAG,IAAI,CAAC;QAElB,IAAI,SAAS,IAAI,CAAC,IAAI,CAAC,QAAQ,CAAC,SAAS,CAAC,EAAE;YAC1C,MAAM,GAAG,GAAG,MAAM,GAAG,SAAS,EAAE,CAAC;SAClC;QAED,MAAM,GAAG,KAAK,CAAC,QAAQ,CAAC,UAAU,EAAE,MAAM,CAAC,CAAC;QAC5C,OAAO,MAAM,CAAC,UAAU,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,MAAM,CAAC,CAAC,CAAC,KAAK,MAAM,EAAE,CAAC;IACzD,CAAC;IAED,uBAAuB,CAAC,IAAY,EAAE,IAAI,GAAG,IAAI,CAAC,QAAQ,CAAC,SAAS;QAClE,OAAO,IAAI,CAAC,CAAC,CAAC,GAAG,IAAI,IAAI,IAAI,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC;IACzC,CAAC;CACF","sourcesContent":["import { posix } from 'path';\nimport type { SetRequired } from 'type-fest';\n\nexport type PathManagerOptions = Readonly<{\n  aliasRoot?: string;\n  extension?: string;\n  relativeTo?: string;\n}>;\n\nexport default class PathManager {\n  readonly #options: SetRequired<PathManagerOptions, 'relativeTo'>;\n\n  constructor(options?: PathManagerOptions) {\n    let extension: string | undefined;\n\n    if (options?.extension) {\n      extension = options.extension.startsWith('.') ? options.extension : `.${options.extension}`;\n    }\n\n    this.#options = {\n      ...options,\n      extension,\n      relativeTo: options?.relativeTo ?? '.',\n    };\n  }\n\n  get aliasRoot(): string | undefined {\n    return this.#options.aliasRoot;\n  }\n\n  createBareModulePath(path: string, isFile = false): string {\n    const { extension } = this.#options;\n\n    if (extension && isFile) {\n      return `${path}.${extension}`;\n    }\n\n    return path;\n  }\n\n  createRelativePath(path: string, relativeTo = this.#options.relativeTo): string {\n    const { extension } = this.#options;\n    let result = path;\n\n    if (extension && !path.endsWith(extension)) {\n      result = `${result}${extension}`;\n    }\n\n    result = posix.relative(relativeTo, result);\n    return result.startsWith('.') ? result : `./${result}`;\n  }\n\n  createTSAliasModulePath(path: string, root = this.#options.aliasRoot): string {\n    return root ? `${root}/${path}` : path;\n  }\n}\n"]}
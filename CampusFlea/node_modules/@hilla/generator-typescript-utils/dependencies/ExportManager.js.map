{"version":3,"file":"ExportManager.js","sourceRoot":"","sources":["../src/dependencies/ExportManager.ts"],"names":[],"mappings":"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","sourcesContent":["import ts, { type ExportAssignment, type ExportDeclaration, type Identifier, type Statement } from 'typescript';\nimport createFullyUniqueIdentifier from '../createFullyUniqueIdentifier.js';\nimport type CodeConvertable from './CodeConvertable.js';\nimport StatementRecordManager, { type StatementRecord } from './StatementRecordManager.js';\nimport { createDependencyRecord, type DependencyRecord } from './utils.js';\n\nexport class NamedExportManager implements CodeConvertable<ExportDeclaration | undefined> {\n  readonly #collator: Intl.Collator;\n  readonly #map = new Map<string, DependencyRecord>();\n\n  constructor(collator: Intl.Collator) {\n    this.#collator = collator;\n  }\n\n  add(name: string, isType?: boolean, uniqueId?: Identifier): Identifier {\n    const id = uniqueId ?? createFullyUniqueIdentifier(name);\n    this.#map.set(name, createDependencyRecord(id, isType));\n    return id;\n  }\n\n  getIdentifier(name: string): Identifier | undefined {\n    return this.#map.get(name)?.id;\n  }\n\n  *identifiers(): IterableIterator<readonly [id: Identifier, isType: boolean]> {\n    for (const { id, isType } of this.#map.values()) {\n      yield [id, isType];\n    }\n  }\n\n  isType(name: string): boolean | undefined {\n    return this.#map.get(name)?.isType;\n  }\n\n  names(): IterableIterator<string> {\n    return this.#map.keys();\n  }\n\n  toCode(): ExportDeclaration | undefined {\n    if (this.#map.size === 0) {\n      return undefined;\n    }\n\n    const names = [...this.#map.keys()];\n    // eslint-disable-next-line @typescript-eslint/unbound-method\n    names.sort(this.#collator.compare);\n\n    return ts.factory.createExportDeclaration(\n      undefined,\n      false,\n      ts.factory.createNamedExports(\n        names.map((name) => {\n          const { id, isType } = this.#map.get(name)!;\n          return ts.factory.createExportSpecifier(isType, id, ts.factory.createIdentifier(name));\n        }),\n      ),\n      undefined,\n    );\n  }\n}\n\nexport class NamespaceExportManager extends StatementRecordManager<ExportDeclaration> {\n  readonly #map = new Map<string, Identifier | null>();\n\n  addCombined(path: string, name: string, uniqueId?: Identifier): Identifier {\n    const id = uniqueId ?? createFullyUniqueIdentifier(name);\n    this.#map.set(path, id);\n    return id;\n  }\n\n  addSpread(path: string): void {\n    this.#map.set(path, null);\n  }\n\n  override clear(): void {\n    this.#map.clear();\n  }\n\n  getIdentifier(path: string): Identifier | null | undefined {\n    return this.#map.get(path);\n  }\n\n  identifiers(): IterableIterator<Identifier | null> {\n    return this.#map.values();\n  }\n\n  isCombined(path: string): boolean | undefined {\n    return this.#map.has(path) ? this.#map.get(path) !== null : undefined;\n  }\n\n  isSpread(path: string): boolean | undefined {\n    return this.#map.has(path) ? this.#map.get(path) === null : undefined;\n  }\n\n  paths(): IterableIterator<string> {\n    return this.#map.keys();\n  }\n\n  override *statementRecords(): IterableIterator<StatementRecord<ExportDeclaration>> {\n    for (const [path, id] of this.#map) {\n      yield [\n        path,\n        ts.factory.createExportDeclaration(\n          undefined,\n          false,\n          id !== null ? ts.factory.createNamespaceExport(id) : undefined,\n          ts.factory.createStringLiteral(path),\n        ),\n      ];\n    }\n  }\n}\n\nexport class DefaultExportManager implements CodeConvertable<ExportAssignment | undefined> {\n  #id?: Identifier;\n\n  set(id: Identifier | string): Identifier {\n    this.#id = typeof id === 'string' ? ts.factory.createIdentifier(id) : id;\n    return this.#id;\n  }\n\n  toCode(): ExportAssignment | undefined {\n    return this.#id ? ts.factory.createExportAssignment(undefined, undefined, this.#id) : undefined;\n  }\n}\n\nexport default class ExportManager implements CodeConvertable<readonly Statement[]> {\n  readonly default = new DefaultExportManager();\n  readonly named: NamedExportManager;\n  readonly namespace: NamespaceExportManager;\n\n  constructor(collator: Intl.Collator) {\n    this.named = new NamedExportManager(collator);\n    this.namespace = new NamespaceExportManager(collator);\n  }\n\n  toCode(): readonly Statement[] {\n    const defaultStatement = this.default.toCode();\n    const namedStatement = this.named.toCode();\n    const namespaceStatements = this.namespace.toCode();\n\n    const result: Statement[] = [];\n\n    if (namedStatement) {\n      result.push(namedStatement);\n    }\n\n    result.push(...namespaceStatements);\n\n    if (defaultStatement) {\n      result.push(defaultStatement);\n    }\n\n    return result;\n  }\n}\n"]}
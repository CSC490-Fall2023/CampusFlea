{"version":3,"file":"ast.js","sourceRoot":"","sources":["src/ast.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,EAAE,EAMV,MAAM,YAAY,CAAC;AAapB,MAAM,UAAU,QAAQ,CACtB,IAAY,EACZ,sBAA4F,EAC5F,YAA4D;IAE5D,IAAI,QAAyC,CAAC;IAE9C,IAAI,KAAK,CAAC,OAAO,CAAC,sBAAsB,CAAC,EAAE;QACzC,6CAA6C;QAC7C,YAAY,GAAG,sBAAsB,CAAC;KACvC;SAAM;QACL,QAAQ,GAAG,sBAA6C,CAAC;KAC1D;IAED,IAAI,UAAU,GAAG,EAAE,CAAC,gBAAgB,CAAC,MAAM,EAAE,IAAI,EAAE,EAAE,CAAC,YAAY,CAAC,MAAM,EAAE,KAAK,CAAC,CAAC;IAElF,IAAI,YAAY,EAAE;QAChB,CAAC,UAAU,CAAC,GAAG,EAAE,CAAC,SAAS,CACzB,UAAU,EACV,YAAqD,CACtD,CAAC,WAAW,CAAC;KACf;IAED,OAAO,QAAQ,EAAE,CAAC,UAAU,CAAC,UAAU,CAAC,IAAI,UAAU,CAAC,UAAU,CAAC;AACpE,CAAC;AAED,MAAM,UAAU,SAAS,CAAiB,WAAiC;IACzE,OAAO,CAAC,OAA8B,EAAE,EAAE,CAAC,CAAC,IAAO,EAAE,EAAE;QACrD,MAAM,OAAO,GAAG,CAAC,IAAU,EAAQ,EAAE,CAAC,EAAE,CAAC,cAAc,CAAC,WAAW,CAAC,IAAI,CAAC,EAAE,OAAO,EAAE,OAAO,CAAC,CAAC;QAC7F,OAAO,EAAE,CAAC,cAAc,CAAC,IAAI,EAAE,OAAO,EAAE,OAAO,CAAC,CAAC;IACnD,CAAC,CAAC;AACJ,CAAC","sourcesContent":["import ts, {\n  type Node,\n  type SourceFile,\n  type Statement,\n  type TransformationContext,\n  type TransformerFactory,\n} from 'typescript';\n\nexport type TemplateSelector<T> = (statements: readonly Statement[]) => T;\n\nexport function template(\n  code: string,\n  transformers?: ReadonlyArray<TransformerFactory<SourceFile>>,\n): readonly Statement[];\nexport function template<T>(\n  code: string,\n  selector: TemplateSelector<T>,\n  transformers?: ReadonlyArray<TransformerFactory<SourceFile>>,\n): T;\nexport function template<T>(\n  code: string,\n  selectorOrTransformers?: ReadonlyArray<TransformerFactory<SourceFile>> | TemplateSelector<T>,\n  transformers?: ReadonlyArray<TransformerFactory<SourceFile>>,\n): T | readonly Statement[] {\n  let selector: TemplateSelector<T> | undefined;\n\n  if (Array.isArray(selectorOrTransformers)) {\n    // eslint-disable-next-line no-param-reassign\n    transformers = selectorOrTransformers;\n  } else {\n    selector = selectorOrTransformers as TemplateSelector<T>;\n  }\n\n  let sourceFile = ts.createSourceFile('f.ts', code, ts.ScriptTarget.Latest, false);\n\n  if (transformers) {\n    [sourceFile] = ts.transform<SourceFile>(\n      sourceFile,\n      transformers as Array<TransformerFactory<SourceFile>>,\n    ).transformed;\n  }\n\n  return selector?.(sourceFile.statements) ?? sourceFile.statements;\n}\n\nexport function transform<T extends Node>(transformer: (node: Node) => Node): TransformerFactory<T> {\n  return (context: TransformationContext) => (root: T) => {\n    const visitor = (node: Node): Node => ts.visitEachChild(transformer(node), visitor, context);\n    return ts.visitEachChild(root, visitor, context);\n  };\n}\n"]}
import { basename, dirname } from 'path';
import createSourceFile from '@hilla/generator-typescript-utils/createSourceFile.js';
import DependencyManager from '@hilla/generator-typescript-utils/dependencies/DependencyManager.js';
import PathManager from '@hilla/generator-typescript-utils/dependencies/PathManager.js';
class BarrelProcessor {
    static BARREL_FILE_NAME = 'endpoints.ts';
    #endpoints;
    #outputPathManager = new PathManager({ extension: 'ts' });
    #owner;
    constructor(endpoints, owner) {
        this.#endpoints = endpoints;
        this.#owner = owner;
    }
    process() {
        this.#owner.logger.info(`Generating '${this.constructor.BARREL_FILE_NAME}' file`);
        const { exports, imports } = this.#endpoints.reduce((acc, { fileName }) => {
            const specifier = basename(fileName, '.ts');
            const path = `${dirname(fileName)}/${specifier}`;
            const id = acc.imports.namespace.add(acc.paths.createRelativePath(path), specifier);
            acc.exports.named.add(specifier, false, id);
            return acc;
        }, new DependencyManager(new PathManager({ extension: '.js' })));
        return createSourceFile([...imports.toCode(), ...exports.toCode()], this.#outputPathManager.createRelativePath('endpoints'));
    }
}
export default BarrelProcessor;
//# sourceMappingURL=BarrelProcessor.js.map
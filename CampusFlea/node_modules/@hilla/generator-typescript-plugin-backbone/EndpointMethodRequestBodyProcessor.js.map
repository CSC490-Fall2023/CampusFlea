{"version":3,"file":"EndpointMethodRequestBodyProcessor.js","sourceRoot":"","sources":["src/EndpointMethodRequestBodyProcessor.ts"],"names":[],"mappings":"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","sourcesContent":["import type Plugin from '@hilla/generator-typescript-core/Plugin.js';\nimport {\n  isEmptyObject,\n  isObjectSchema,\n  type NonEmptyObjectSchema,\n  type Schema,\n} from '@hilla/generator-typescript-core/Schema.js';\nimport type DependencyManager from '@hilla/generator-typescript-utils/dependencies/DependencyManager.js';\nimport type { OpenAPIV3 } from 'openapi-types';\nimport type { ReadonlyDeep } from 'type-fest';\nimport ts, { type ObjectLiteralExpression, type ParameterDeclaration } from 'typescript';\nimport TypeSchemaProcessor from './TypeSchemaProcessor.js';\nimport { defaultMediaType } from './utils.js';\n\nexport type EndpointMethodRequestBody = ReadonlyDeep<OpenAPIV3.RequestBodyObject>;\n\nexport type EndpointMethodRequestBodyProcessingResult = Readonly<{\n  parameters: readonly ParameterDeclaration[];\n  packedParameters?: ObjectLiteralExpression;\n  initParam: ts.Identifier;\n}>;\n\nexport default class EndpointMethodRequestBodyProcessor {\n  static readonly #defaultInitParamName = 'init';\n\n  readonly #dependencies: DependencyManager;\n  readonly #owner: Plugin;\n  readonly #requestBody?: EndpointMethodRequestBody;\n  readonly #initTypeIdentifier: ts.Identifier;\n\n  constructor(\n    requestBody: ReadonlyDeep<OpenAPIV3.ReferenceObject | OpenAPIV3.RequestBodyObject> | undefined,\n    dependencies: DependencyManager,\n    owner: Plugin,\n    initTypeIdentifier: ts.Identifier,\n  ) {\n    this.#owner = owner;\n    this.#dependencies = dependencies;\n    this.#requestBody = requestBody ? owner.resolver.resolve(requestBody) : undefined;\n    this.#initTypeIdentifier = initTypeIdentifier;\n  }\n\n  process(): EndpointMethodRequestBodyProcessingResult {\n    if (!this.#requestBody) {\n      return {\n        initParam: ts.factory.createIdentifier(EndpointMethodRequestBodyProcessor.#defaultInitParamName),\n        packedParameters: ts.factory.createObjectLiteralExpression(),\n        parameters: [\n          ts.factory.createParameterDeclaration(\n            undefined,\n            undefined,\n            EndpointMethodRequestBodyProcessor.#defaultInitParamName,\n            ts.factory.createToken(ts.SyntaxKind.QuestionToken),\n            ts.factory.createTypeReferenceNode(this.#initTypeIdentifier),\n          ),\n        ],\n      };\n    }\n\n    const parameterData = this.#extractParameterData(this.#requestBody.content[defaultMediaType].schema);\n    const parameterNames = parameterData.map(([name]) => name);\n    let initParamName = EndpointMethodRequestBodyProcessor.#defaultInitParamName;\n\n    while (parameterNames.includes(initParamName)) {\n      initParamName = `_${initParamName}`;\n    }\n\n    return {\n      initParam: ts.factory.createIdentifier(initParamName),\n      packedParameters: ts.factory.createObjectLiteralExpression(\n        parameterData.map(([name]) => ts.factory.createShorthandPropertyAssignment(name)),\n      ),\n      parameters: [\n        ...parameterData.map(([name, schema]) => {\n          const nodes = new TypeSchemaProcessor(schema, this.#dependencies).process();\n\n          return ts.factory.createParameterDeclaration(\n            undefined,\n            undefined,\n            name,\n            undefined,\n            ts.factory.createUnionTypeNode(nodes),\n          );\n        }),\n        ts.factory.createParameterDeclaration(\n          undefined,\n          undefined,\n          initParamName,\n          ts.factory.createToken(ts.SyntaxKind.QuestionToken),\n          ts.factory.createTypeReferenceNode(this.#initTypeIdentifier),\n        ),\n      ],\n    };\n  }\n\n  #extractParameterData(\n    basicSchema?: ReadonlyDeep<OpenAPIV3.ReferenceObject | OpenAPIV3.SchemaObject>,\n  ): Array<readonly [string, Schema]> {\n    if (!basicSchema) {\n      return [];\n    }\n\n    const { logger, resolver } = this.#owner;\n\n    const resolvedSchema = resolver.resolve(basicSchema);\n\n    if (isObjectSchema(resolvedSchema) && !isEmptyObject(resolvedSchema)) {\n      return Object.entries((resolvedSchema as NonEmptyObjectSchema).properties);\n    }\n\n    logger.warn(\"A schema provided for endpoint method's 'requestBody' is not supported\");\n    return [];\n  }\n}\n"]}
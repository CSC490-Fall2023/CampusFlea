{"version":3,"file":"Field.js","sourceRoot":"","sources":["src/Field.ts"],"names":[],"mappings":"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","sourcesContent":["import { type ElementPart, noChange, nothing, type PropertyPart } from 'lit';\nimport { directive, Directive, type DirectiveParameters, type PartInfo, PartType } from 'lit/directive.js';\nimport { _fromString, type AbstractModel, ArrayModel, ObjectModel, getBinderNode, hasFromString } from './Models.js';\nimport { _validity, defaultValidity } from './Validity.js';\n\ninterface FieldBase<T> {\n  required: boolean;\n  invalid: boolean;\n  errorMessage: string;\n  value: T;\n}\n\n/**\n * Subset of the HTML constraint validation API with the `checkValidity()` method.\n */\ntype FieldConstraintValidation = Readonly<{\n  validity: ValidityState;\n  checkValidity(): boolean;\n}>;\n\ntype FieldElement<T> = Element & FieldBase<T> & Partial<FieldConstraintValidation>;\n\ninterface FieldElementHolder<T> {\n  get element(): FieldElement<T>;\n\n  /**\n   * @param element the new element value\n   * @deprecated will be read-only in future\n   */\n  set element(element: FieldElement<T>);\n}\n\ninterface Field<T> extends FieldBase<T> {\n  readonly model?: AbstractModel<T>;\n}\n\ninterface FieldState<T> extends Field<T>, FieldElementHolder<T> {\n  name: string;\n  validity: ValidityState;\n  strategy: FieldStrategy<T>;\n}\n\nexport type FieldStrategy<T = any> = Field<T> & FieldConstraintValidation;\n\nexport abstract class AbstractFieldStrategy<T = any> implements FieldStrategy<T> {\n  abstract required: boolean;\n\n  abstract invalid: boolean;\n\n  private _element: FieldElement<T>;\n\n  /**\n   * Fallback for missing .validity property API in Vaadin components.\n   * @private\n   */\n  private _validityFallback: ValidityState = defaultValidity;\n\n  constructor(element: FieldElement<T>, readonly model?: AbstractModel<T>) {\n    this._element = element;\n  }\n\n  get element() {\n    return this._element;\n  }\n\n  /**\n   * @param element the new element value\n   * @deprecated will be read-only in future\n   */\n  set element(element: FieldElement<T>) {\n    this._element = element;\n  }\n\n  get value() {\n    return this.element.value;\n  }\n\n  set value(value) {\n    this.element.value = value;\n  }\n\n  set errorMessage(_: string) {} // eslint-disable-line @typescript-eslint/no-empty-function\n\n  setAttribute(key: string, val: any) {\n    if (val) {\n      this.element.setAttribute(key, '');\n    } else {\n      this.element.removeAttribute(key);\n    }\n  }\n\n  get validity() {\n    return this.element.validity || this._validityFallback;\n  }\n\n  checkValidity() {\n    if (!this.element.checkValidity) {\n      return true;\n    }\n\n    const valid = this.element.checkValidity();\n    this._validityFallback = {\n      ...defaultValidity,\n      valid,\n      ...(valid ? {} : this._detectValidityError()),\n    };\n    return valid;\n  }\n\n  private _detectValidityError(): Readonly<Partial<ValidityState>> {\n    if (!('inputElement' in this.element)) {\n      // Not a Vaadin component field\n      return { customError: true };\n    }\n\n    const inputElement = this.element.inputElement as FieldElement<string>;\n\n    if (this.element.value === '') {\n      if (inputElement.value === '') {\n        return { valueMissing: true };\n      }\n      // Some value is entered, but not meaningful to the\n      // web component — assume parse error.\n      return { badInput: true };\n    }\n    // Unknown constraint violation\n    return { customError: true };\n  }\n}\n\nexport class VaadinFieldStrategy<T = any> extends AbstractFieldStrategy<T> {\n  private _invalid = false;\n\n  constructor(element: FieldElement<T>, model?: AbstractModel<T>) {\n    super(element, model);\n\n    // Override built-in changes of the `invalid` flag in Vaadin components\n    // to keep the `invalid` property state of the web component in sync.\n    (element as any).addEventListener('validated', this._overrideVaadinInvalidChange.bind(this));\n  }\n\n  set required(value: boolean) {\n    this.element.required = value;\n  }\n\n  set invalid(value: boolean) {\n    this._invalid = value;\n    this.element.invalid = value;\n  }\n\n  override set errorMessage(value: string) {\n    this.element.errorMessage = value;\n  }\n\n  private _overrideVaadinInvalidChange(e: CustomEvent<Partial<ValidityState>>) {\n    if (this._invalid !== !e.detail.valid) {\n      this.element.invalid = this._invalid;\n    }\n  }\n}\n\nexport class GenericFieldStrategy extends AbstractFieldStrategy {\n  set required(value: boolean) {\n    this.setAttribute('required', value);\n  }\n\n  set invalid(value: boolean) {\n    this.setAttribute('invalid', value);\n  }\n}\n\nexport class CheckedFieldStrategy extends GenericFieldStrategy {\n  override set value(val: any) {\n    (this.element as any).checked = /^(true|on)$/i.test(String(val));\n  }\n\n  override get value() {\n    return (this.element as any).checked;\n  }\n}\n\nexport class ComboBoxFieldStrategy extends VaadinFieldStrategy {\n  override get value() {\n    if (this.model && (this.model instanceof ObjectModel || this.model instanceof ArrayModel)) {\n      const { selectedItem } = this.element as any;\n      return selectedItem === null ? undefined : selectedItem;\n    }\n\n    return super.value;\n  }\n\n  override set value(val: any) {\n    if (this.model instanceof ObjectModel || this.model instanceof ArrayModel) {\n      (this.element as any).selectedItem = val === undefined ? null : val;\n    } else {\n      super.value = val;\n    }\n  }\n}\n\nexport class MultiSelectComboBoxFieldStrategy extends VaadinFieldStrategy {\n  override get value() {\n    return (this.element as any).selectedItems;\n  }\n\n  override set value(val: any) {\n    (this.element as any).selectedItems = val;\n  }\n}\n\nexport class SelectedFieldStrategy extends GenericFieldStrategy {\n  override set value(val: any) {\n    (this.element as any).selected = val;\n  }\n\n  override get value() {\n    return (this.element as any).selected;\n  }\n}\n\nexport function getDefaultFieldStrategy<T>(elm: any, model?: AbstractModel<T>): AbstractFieldStrategy<T> {\n  switch (elm.localName) {\n    case 'vaadin-checkbox':\n    case 'vaadin-radio-button':\n      return new CheckedFieldStrategy(elm, model);\n    case 'vaadin-combo-box':\n      return new ComboBoxFieldStrategy(elm, model);\n    case 'vaadin-list-box':\n      return new SelectedFieldStrategy(elm, model);\n    case 'vaadin-multi-select-combo-box':\n      return new MultiSelectComboBoxFieldStrategy(elm, model);\n    case 'vaadin-rich-text-editor':\n      return new GenericFieldStrategy(elm, model);\n    default:\n      if (elm.localName === 'input' && /^(checkbox|radio)$/.test(elm.type)) {\n        return new CheckedFieldStrategy(elm, model);\n      }\n      return elm.constructor.version ? new VaadinFieldStrategy(elm, model) : new GenericFieldStrategy(elm, model);\n  }\n}\n\nfunction convertFieldValue<T extends AbstractModel<unknown>>(model: T, fieldValue: unknown) {\n  return typeof fieldValue === 'string' && hasFromString(model) ? model[_fromString](fieldValue) : fieldValue;\n}\n\n/**\n * Binds a form field component into a model.\n *\n * Example usage:\n *\n * ```\n * <vaadin-text-field ...=\"${field(model.name)}\">\n * </vaadin-text-field>\n * ```\n */\nexport const field = directive(\n  class extends Directive {\n    fieldState?: FieldState<any>;\n\n    constructor(partInfo: PartInfo) {\n      super(partInfo);\n      if (partInfo.type !== PartType.PROPERTY && partInfo.type !== PartType.ELEMENT) {\n        throw new Error('Use as \"<element {field(...)}\" or <element ...={field(...)}\"');\n      }\n    }\n\n    // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    override render(model: AbstractModel<any>, effect?: (element: Element) => void) {\n      return nothing;\n    }\n\n    override update(part: ElementPart | PropertyPart, [model, effect]: DirectiveParameters<this>) {\n      const element = part.element as FieldElement<any> & HTMLInputElement;\n\n      const binderNode = getBinderNode(model);\n\n      if (!this.fieldState) {\n        const fieldState = {\n          name: '',\n          value: '',\n          required: false,\n          invalid: false,\n          errorMessage: '',\n          model,\n          validity: defaultValidity,\n          element,\n          strategy: binderNode.binder.getFieldStrategy(element, model),\n        };\n\n        this.fieldState = fieldState;\n\n        const updateValueFromElement = () => {\n          fieldState.strategy.checkValidity();\n          // When bad input is detected, skip reading new value in binder state\n          if (!fieldState.strategy.validity.badInput) {\n            fieldState.value = fieldState.strategy.value;\n          }\n          fieldState.validity = fieldState.strategy.validity;\n          binderNode[_validity] = fieldState.validity;\n          binderNode.value = convertFieldValue(model, fieldState.value);\n          if (effect !== undefined) {\n            effect.call(element, element);\n          }\n        };\n\n        element.addEventListener('input', updateValueFromElement);\n\n        const changeBlurHandler = () => {\n          updateValueFromElement();\n          binderNode.visited = true;\n        };\n\n        element.addEventListener('blur', changeBlurHandler);\n        element.addEventListener('change', changeBlurHandler);\n      }\n\n      const { fieldState } = this;\n\n      if (fieldState.element !== element || fieldState.model !== model) {\n        fieldState.strategy = binderNode.binder.getFieldStrategy(element, model);\n      }\n\n      const { name } = binderNode;\n      if (name !== fieldState.name) {\n        fieldState.name = name;\n        element.setAttribute('name', name);\n      }\n\n      const { value } = binderNode;\n      const valueFromField = convertFieldValue(model, fieldState.value);\n      if (value !== valueFromField && !(Number.isNaN(value) && Number.isNaN(valueFromField))) {\n        fieldState.value = value;\n        fieldState.strategy.value = value;\n      }\n\n      const { required } = binderNode;\n      if (required !== fieldState.required) {\n        fieldState.required = required;\n        fieldState.strategy.required = required;\n      }\n\n      const firstError = binderNode.ownErrors ? binderNode.ownErrors[0] : undefined;\n      const errorMessage = (firstError && firstError.message) || '';\n      if (errorMessage !== fieldState.errorMessage) {\n        fieldState.errorMessage = errorMessage;\n        fieldState.strategy.errorMessage = errorMessage;\n      }\n\n      const { invalid } = binderNode;\n      if (invalid !== fieldState.invalid) {\n        fieldState.invalid = invalid;\n        fieldState.strategy.invalid = invalid;\n      }\n\n      return noChange;\n    }\n  },\n);\n"]}
import{NumberModel as d,getBinderNode as p}from"./Models.js";import{Required as m}from"./Validators.js";class y extends Error{errors;constructor(e){super(["There are validation errors in the form.",...e.map(n=>`${n.property.toString()} - ${n.validator.constructor.name}${n.message?`: ${n.message}`:""}`)].join(`
 - `)),this.errors=e,this.name=this.constructor.name}}class g{message;constructor(e){this.message=e}validate=()=>!1}function s(t,e){return typeof e.property=="string"&&t.length>0&&(e.property=`${t}.${e.property}`),e}async function V(t,e,n){const a=p(t),o=a.value,i=r=>n?n(r,e,a):r;return!a.required&&!new m().validate(o)&&!(t instanceof d)?[]:(async()=>e.validate(o,a.binder))().catch(r=>(console.error(`${a.name} - Validator ${e.constructor.name} threw an error:`,r),[{message:"Validator threw an error",property:a.name,validator:e,value:o}])).then(r=>r===!1?[{message:i(e.message),property:a.name,validator:e,value:o}]:r===!0||Array.isArray(r)&&r.length===0?[]:Array.isArray(r)?r.map(l=>({message:i(e.message),...s(a.name,l),validator:e,value:o})):[{message:i(e.message),...s(a.name,r),validator:e,value:o}])}export{g as ServerValidator,y as ValidationError,V as runValidator};
//# sourceMappingURL=Validation.js.map

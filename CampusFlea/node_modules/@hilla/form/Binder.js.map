{
  "version": 3,
  "sources": ["src/Binder.ts"],
  "sourcesContent": ["import type { LitElement } from 'lit';\nimport { BinderRoot, type BinderConfiguration } from './BinderRoot.js';\nimport type { AbstractModel, ModelConstructor } from './Models.js';\n\n/**\n * A Binder controls all aspects of a single form.\n * Typically, it is used to get and set the form value,\n * access the form model, validate, reset, and submit the form.\n *\n * @typeParam T - Type of the value that binds to a form\n * @typeParam M - Type of the model that describes the structure of the value\n */\nexport class Binder<T, M extends AbstractModel<T>> extends BinderRoot<T, M> {\n  context: Element;\n\n  /**\n   *\n   * @param context - The form view component instance to update.\n   * @param Model - The constructor (the class reference) of the form model. The Binder instantiates the top-level model\n   * @param config - The options object, which can be used to config the onChange and onSubmit callbacks.\n   *\n   * ```\n   * binder = new Binder(orderView, OrderModel);\n   * or\n   * binder = new Binder(orderView, OrderModel, {onSubmit: async (order) => {endpoint.save(order)}});\n   * ```\n   */\n  constructor(context: Element, Model: ModelConstructor<T, M>, config?: BinderConfiguration<T>) {\n    const changeCallback =\n      config?.onChange ??\n      (typeof (context as LitElement).requestUpdate === 'function'\n        ? () => (context as LitElement).requestUpdate()\n        : undefined);\n\n    super(Model, {\n      ...(config ?? {}),\n      onChange: changeCallback,\n      context,\n    });\n    this.context = context;\n  }\n}\n"],
  "mappings": "AACA,OAAS,cAAAA,MAA4C,kBAW9C,MAAMC,UAA8CD,CAAiB,CAC1E,QAcA,YAAYE,EAAkBC,EAA+BC,EAAiC,CAC5F,MAAMC,EACJD,GAAQ,WACP,OAAQF,EAAuB,eAAkB,WAC9C,IAAOA,EAAuB,cAAc,EAC5C,QAEN,MAAMC,EAAO,CACX,GAAIC,GAAU,CAAC,EACf,SAAUC,EACV,QAAAH,CACF,CAAC,EACD,KAAK,QAAUA,CACjB,CACF",
  "names": ["BinderRoot", "Binder", "context", "Model", "config", "changeCallback"]
}

import h from"validator/es/lib/isNumeric.js";import{BinderNode as A}from"./BinderNode.js";import{IsNumber as k}from"./Validators.js";const y=Symbol("ItemModel"),M=Symbol("parent"),p=Symbol("key"),s=Symbol("fromString"),m=Symbol("validators"),d=Symbol("binderNode"),v=Symbol("getPropertyModel"),f=Symbol("enum"),l=Symbol("properties"),c=Symbol("optional");function b(o){return o[d]||(o[d]=new A(o)),o[d]}function C(o){return s in o}class i{static createEmptyValue(){}[M];[m];[c];[d];[p];constructor(e,t,r,...n){this[M]=e,this[p]=t,this[c]=r,this[m]=n}toString(){return String(this.valueOf())}valueOf(){const{value:e}=b(this);if(e===void 0)throw new TypeError("Value is undefined");return e}}class u extends i{}class E extends u{static createEmptyValue=Boolean;[s](e){return["true","1","yes"].includes(e.toLowerCase())}}class P extends u{static createEmptyValue=Number;constructor(e,t,r,...n){super(e,t,r,new k(r),...n)}[s](e){if(e!=="")return h(e)?Number.parseFloat(e):NaN}}class O extends u{static createEmptyValue=String;[s]=String}class g extends i{static createEmptyValue(){if(this===g)throw new Error("Cannot create an instance of an abstract class");const{[f]:e}=new this({value:void 0},"value",!1);return Object.values(e)[0]}[s](e){return e in this[f]?e:void 0}}class x extends i{static*getOwnAndParentGetters(e){for(let t=Object.getPrototypeOf(e);t!==x.prototype;t=Object.getPrototypeOf(t)){const r=Object.getOwnPropertyDescriptors(t);for(const[n,{get:a}]of Object.entries(r))a&&(yield[n,a])}}static createEmptyValue(){const e=new this({value:void 0},"value",!1),t={};for(const[r,n]of this.getOwnAndParentGetters(e)){const a=n.call(e);t[r]=a[c]?void 0:a.constructor.createEmptyValue()}return t}[l]={};[v](e,t,r){return this[l][e]===void 0&&(this[l][e]=new t(this,e,...r)),this[l][e]}}class N extends i{static createEmptyValue(){return[]}[y];itemModelArgs;itemModels=[];constructor(e,t,r,n,a,...T){super(e,t,r,...T),this[y]=n,this.itemModelArgs=a}*[Symbol.iterator](){const e=this.valueOf(),t=this[y];e.length!==this.itemModels.length&&(this.itemModels.length=e.length);for(const r of e.keys()){let n=this.itemModels[r];n===void 0&&(n=new t(this,r,...this.itemModelArgs),this.itemModels[r]=n),yield b(n)}}}export{i as AbstractModel,N as ArrayModel,E as BooleanModel,g as EnumModel,P as NumberModel,x as ObjectModel,u as PrimitiveModel,O as StringModel,y as _ItemModel,d as _binderNode,f as _enum,s as _fromString,v as _getPropertyModel,p as _key,M as _parent,m as _validators,b as getBinderNode,C as hasFromString};
//# sourceMappingURL=Models.js.map

import { BinderNode, CHANGED } from './BinderNode.js';
import { type FieldStrategy } from './Field.js';
import { type AbstractModel, type ModelConstructor } from './Models.js';
import { type InterpolateMessageCallback, type Validator, type ValueError } from './Validation.js';
export { CHANGED };
declare const _submitting: unique symbol;
declare const _defaultValue: unique symbol;
declare const _value: unique symbol;
declare const _emptyValue: unique symbol;
declare const _config: unique symbol;
declare const _validations: unique symbol;
declare const _validating: unique symbol;
declare const _validationRequestSymbol: unique symbol;
export type BinderConfiguration<T> = Readonly<{
    onChange?(oldValue?: T): void;
    onSubmit?(value: T): Promise<T | undefined> | Promise<void>;
}>;
export type BinderRootConfiguration<T> = BinderConfiguration<T> & Readonly<{
    context?: any;
}>;
/**
 * A simplified Binder that does not require a context.
 * It can be used as root when there is no Element to use as context.
 *
 * @typeParam T - Type of the value that binds to a form
 * @typeParam M - Type of the model that describes the structure of the value
 */
export declare class BinderRoot<T, M extends AbstractModel<T>> extends BinderNode<T, M> {
    #private;
    static interpolateMessageCallback?: InterpolateMessageCallback<any>;
    private [_defaultValue];
    private [_value];
    private [_emptyValue];
    private [_submitting];
    private [_validating];
    private [_validationRequestSymbol]?;
    private [_config]?;
    private [_validations];
    /**
     *
     * @param Model - The constructor (the class reference) of the form model. The Binder instantiates the top-level model
     * @param config - The options object, which can be used to config the onChange and onSubmit callbacks.
     *
     * ```
     * binder = new BinderRoot(OrderModel);
     * or
     * binder = new BinderRoot(OrderModel, {onSubmit: async (order) => {endpoint.save(order)}});
     * ```
     */
    constructor(Model: ModelConstructor<T, M>, config?: BinderRootConfiguration<T>);
    /**
     * The initial value of the form, before any fields are edited by the user.
     */
    get defaultValue(): T;
    set defaultValue(newValue: T);
    /**
     * The current value of the form.
     */
    get value(): T;
    set value(newValue: T);
    /**
     * Indicates the submitting status of the form.
     * True if the form was submitted, but the submit promise is not resolved yet.
     */
    get submitting(): boolean;
    /**
     * Indicates the validating status of the form.
     * True when there is an ongoing validation.
     */
    get validating(): boolean;
    /**
     * Read the given value into the form and clear validation errors. Clears the form if the value is undefined.
     *
     * @param value - The value to read, or undefined to clear.
     */
    read(value: T | null | undefined): void;
    /**
     * Reset the form to the previous value
     */
    reset(): void;
    /**
     * Sets the form to empty value, as defined in the Model.
     */
    clear(): void;
    /**
     * Submit the current form value to a predefined
     * onSubmit callback.
     *
     * It's a no-op if the onSubmit callback is undefined.
     */
    submit(): Promise<T | undefined>;
    /**
     * Submit the current form value to callback
     *
     * @param endpointMethod - the callback function
     */
    submitTo<V>(endpointMethod: (value: T) => Promise<V>): Promise<V>;
    requestValidation<NT, NM extends AbstractModel<NT>>(model: NM, validator: Validator<NT>): Promise<ReadonlyArray<ValueError<NT>>>;
    /**
     * Determines and returns the field directive strategy for the bound element.
     * Override to customise the binding strategy for a component.
     * The Binder extends BinderNode, see the inherited properties and methods below.
     *
     * @param elm - the bound element
     * @param model - the bound model
     */
    getFieldStrategy<TField>(elm: any, model?: AbstractModel<TField>): FieldStrategy;
    protected performValidation(): Promise<void> | void;
    protected completeValidation(): void;
    protected update(oldValue: T): void;
}
//# sourceMappingURL=BinderRoot.d.ts.map
{
  "version": 3,
  "sources": ["src/Models.ts"],
  "sourcesContent": ["// TODO: Fix dependency cycle\n\nimport isNumeric from 'validator/es/lib/isNumeric.js';\n// eslint-disable-next-line import/no-cycle\nimport { BinderNode } from './BinderNode.js';\nimport type { Validator } from './Validation.js';\nimport { IsNumber } from './Validators.js';\n\nexport const _ItemModel = Symbol('ItemModel');\nexport const _parent = Symbol('parent');\nexport const _key = Symbol('key');\nexport const _fromString = Symbol('fromString');\nexport const _validators = Symbol('validators');\nexport const _binderNode = Symbol('binderNode');\nexport const _getPropertyModel = Symbol('getPropertyModel');\nexport const _enum = Symbol('enum');\n\nconst _properties = Symbol('properties');\nconst _optional = Symbol('optional');\n\nexport function getBinderNode<M extends AbstractModel<any>, T extends ModelValue<M>>(model: M): BinderNode<T, M> {\n  if (!model[_binderNode]) {\n    model[_binderNode] = new BinderNode(model);\n  }\n\n  return model[_binderNode]!;\n}\n\nexport interface HasFromString<T> {\n  [_fromString](value: string): T;\n}\n\nexport function hasFromString<T>(model: AbstractModel<T>): model is AbstractModel<T> & HasFromString<T> {\n  return _fromString in model;\n}\n\nexport interface HasValue<T> {\n  value?: T;\n}\n\nexport type ModelParent<T> = AbstractModel<any> | HasValue<T>;\nexport type ModelValue<M extends AbstractModel<unknown>> = ReturnType<M['valueOf']>;\n\nexport interface ModelConstructor<T, M extends AbstractModel<T>> {\n  new (parent: ModelParent<T>, key: keyof any, optional: boolean, ...args: any[]): M;\n  createEmptyValue(): T;\n}\n\ntype ModelVariableArguments<C> = C extends new (\n  parent: ModelParent<any>,\n  key: keyof any,\n  ...args: infer R extends [boolean, ...any]\n) => AbstractModel<any>\n  ? R\n  : never;\n\ntype ModelCtor = {\n  new (parent: ModelParent<any>, key: keyof any, ...args: any[]): any;\n  createEmptyValue(): unknown;\n};\n\nexport type ModelInstance<C extends ModelCtor, MArgs extends ModelVariableArguments<C>> = C extends new (\n  parent: ModelParent<any>,\n  key: keyof any,\n  ...args: MArgs\n) => infer M\n  ? M\n  : never;\n\nexport abstract class AbstractModel<T> {\n  static createEmptyValue(): unknown {\n    return undefined;\n  }\n\n  declare readonly ['constructor']: typeof AbstractModel;\n\n  readonly [_parent]: ModelParent<T>;\n\n  readonly [_validators]: ReadonlyArray<Validator<T>>;\n\n  readonly [_optional]: boolean;\n\n  [_binderNode]?: BinderNode<T, this>;\n\n  [_key]: keyof any;\n\n  constructor(parent: ModelParent<T>, key: keyof any, optional: boolean, ...validators: ReadonlyArray<Validator<T>>) {\n    this[_parent] = parent;\n    this[_key] = key;\n    this[_optional] = optional;\n    this[_validators] = validators;\n  }\n\n  toString(): string {\n    return String(this.valueOf());\n  }\n\n  valueOf(): T {\n    const { value } = getBinderNode(this);\n    if (value === undefined) {\n      throw new TypeError('Value is undefined');\n    }\n    return value;\n  }\n}\n\nexport abstract class PrimitiveModel<T> extends AbstractModel<T> {}\n\nexport class BooleanModel extends PrimitiveModel<boolean> implements HasFromString<boolean> {\n  static override createEmptyValue = Boolean;\n\n  [_fromString](str: string): boolean {\n    // This implementation matches the values accepted by validator.js and converts all other values to false\n    // See https://github.com/validatorjs/validator.js/blob/master/src/lib/isBoolean.js\n    return ['true', '1', 'yes'].includes(str.toLowerCase());\n  }\n}\n\nexport class NumberModel extends PrimitiveModel<number> implements HasFromString<number | undefined> {\n  static override createEmptyValue = Number;\n\n  constructor(\n    parent: ModelParent<number>,\n    key: keyof any,\n    optional: boolean,\n    ...validators: ReadonlyArray<Validator<number>>\n  ) {\n    // Prepend a built-in validator to indicate NaN input\n    super(parent, key, optional, new IsNumber(optional), ...validators);\n  }\n\n  [_fromString](str: string): number | undefined {\n    // Returning undefined is needed to support passing the validation when the value of an optional number field is\n    // an empty string\n    if (str === '') return undefined;\n    return isNumeric(str) ? Number.parseFloat(str) : NaN;\n  }\n}\n\nexport class StringModel extends PrimitiveModel<string> implements HasFromString<string> {\n  static override createEmptyValue = String;\n\n  [_fromString] = String;\n}\n\ndeclare enum Enum {}\n\nexport abstract class EnumModel<E extends typeof Enum>\n  extends AbstractModel<E[keyof E]>\n  implements HasFromString<E[keyof E] | undefined>\n{\n  static override createEmptyValue(): unknown {\n    if (this === EnumModel) {\n      throw new Error('Cannot create an instance of an abstract class');\n    }\n\n    // @ts-expect-error: the instantiation of the abstract class is handled above.\n    // Now only the children instantiation could happen.\n    const { [_enum]: enumObject } = new this({ value: undefined }, 'value', false);\n\n    return Object.values(enumObject)[0];\n  }\n\n  abstract readonly [_enum]: E;\n\n  [_fromString](value: string): E[keyof E] | undefined {\n    return value in this[_enum] ? (value as E[keyof E]) : undefined;\n  }\n}\n\nexport class ObjectModel<T> extends AbstractModel<T> {\n  static *getOwnAndParentGetters<M extends ObjectModel<any>>(\n    model: M,\n  ): Generator<readonly [key: string, getter: () => unknown]> {\n    for (\n      let proto = Object.getPrototypeOf(model);\n      proto !== ObjectModel.prototype;\n      proto = Object.getPrototypeOf(proto)\n    ) {\n      const descriptors = Object.getOwnPropertyDescriptors(proto);\n      for (const [name, { get }] of Object.entries(descriptors)) {\n        if (get) {\n          yield [name, get];\n        }\n      }\n    }\n  }\n\n  static override createEmptyValue(): { readonly [key in never]: unknown } {\n    const model = new this({ value: undefined as any }, 'value' as keyof any, false);\n    const obj: Record<string, unknown> = {};\n\n    // Iterate the model class hierarchy up to the ObjectModel, and extract\n    // the property getter names from every prototypes\n    for (const [key, getter] of this.getOwnAndParentGetters(model)) {\n      const propertyModel = getter.call(model) as AbstractModel<any>;\n      obj[key] = propertyModel[_optional] ? undefined : propertyModel.constructor.createEmptyValue();\n    }\n\n    return obj;\n  }\n\n  private [_properties]: { [name in keyof T]?: AbstractModel<any> } = {};\n\n  protected [_getPropertyModel]<\n    KChild extends keyof T,\n    C extends ModelCtor,\n    MArgs extends ModelVariableArguments<C>,\n    M extends ModelInstance<C, MArgs>,\n  >(key: KChild, ValueModel: C, valueModelArgs: MArgs): M {\n    if (this[_properties][key] === undefined) {\n      this[_properties][key] = new ValueModel(this, key, ...valueModelArgs);\n    }\n\n    return this[_properties][key]! as M;\n  }\n}\n\nexport class ArrayModel<\n  T extends ModelValue<M>,\n  M extends ModelInstance<C, MArgs>,\n  C extends ModelCtor = ModelConstructor<T, M>,\n  MArgs extends ModelVariableArguments<C> = ModelVariableArguments<C>,\n> extends AbstractModel<readonly T[]> {\n  static override createEmptyValue(): [] {\n    return [];\n  }\n\n  private readonly [_ItemModel]: C;\n\n  private readonly itemModelArgs: MArgs;\n\n  private readonly itemModels: M[] = [];\n\n  constructor(\n    parent: ModelParent<readonly T[]>,\n    key: keyof any,\n    optional: boolean,\n    ItemModel: C,\n    itemModelArgs: MArgs,\n    ...validators: ReadonlyArray<Validator<readonly T[]>>\n  ) {\n    super(parent, key, optional, ...validators);\n    this[_ItemModel] = ItemModel;\n    this.itemModelArgs = itemModelArgs;\n  }\n\n  /**\n   * Iterates the current array value and yields a binder node for every item.\n   */\n  *[Symbol.iterator](): IterableIterator<BinderNode<T, M>> {\n    const array = this.valueOf();\n    const ItemModel = this[_ItemModel];\n    if (array.length !== this.itemModels.length) {\n      this.itemModels.length = array.length;\n    }\n    for (const i of array.keys()) {\n      let itemModel: M | undefined = this.itemModels[i];\n      // eslint-disable-next-line @typescript-eslint/no-unnecessary-condition\n      if (itemModel === undefined) {\n        // const [optional, ...rest] = this.itemModelArgs;\n        itemModel = new ItemModel(this, i, ...this.itemModelArgs);\n        // @ts-expect-error M always matches the expected type\n        this.itemModels[i] = itemModel;\n      }\n      yield getBinderNode(itemModel!) as unknown as BinderNode<T, M>;\n    }\n  }\n}\n"],
  "mappings": "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",
  "names": ["isNumeric", "BinderNode", "IsNumber", "_ItemModel", "_parent", "_key", "_fromString", "_validators", "_binderNode", "_getPropertyModel", "_enum", "_properties", "_optional", "getBinderNode", "model", "hasFromString", "AbstractModel", "parent", "key", "optional", "validators", "value", "PrimitiveModel", "BooleanModel", "str", "NumberModel", "StringModel", "EnumModel", "enumObject", "ObjectModel", "proto", "descriptors", "name", "get", "obj", "getter", "propertyModel", "ValueModel", "valueModelArgs", "ArrayModel", "ItemModel", "itemModelArgs", "array", "i", "itemModel"]
}

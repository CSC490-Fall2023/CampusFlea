{"version":3,"file":"index.js","sourceRoot":"","sources":["src/index.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,IAAI,EAAE,MAAM,aAAa,CAAC;AACnC,OAAO,EAAE,aAAa,EAAE,MAAM,KAAK,CAAC;AACpC,OAAO,MAAM,MAAM,4CAA4C,CAAC;AAEhE,OAAO,eAAe,MAAM,sBAAsB,CAAC;AAEnD,MAAM,CAAC,OAAO,OAAO,YAAa,SAAQ,MAAM;IAC9C,MAAM,CAAU,gBAAgB,GAAG,wBAAwB,CAAC;IAC5D,MAAM,CAAU,uBAAuB,GAAG,mBAAmB,CAAC;IAE9D,MAAM,CAAC,KAAK,CAAC,iBAAiB,CAAC,IAAa;QAC1C,OAAO,CAAC,MAAM,YAAY,CAAC,yBAAyB,CAAC,IAAI,CAAC,CAAC;YACzD,CAAC,CAAC,YAAY,CAAC,uBAAuB;YACtC,CAAC,CAAC,YAAY,CAAC,gBAAgB,CAAC;IACpC,CAAC;IAED,MAAM,CAAC,KAAK,CAAC,yBAAyB,CAAC,IAAa;QAClD,MAAM,GAAG,GAAG,IAAI,EAAE,UAAU,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC,aAAa,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC;QAEnE,IAAI;YACF,OAAO,CAAC,CAAC,CAAC,GAAG,IAAI,CAAC,MAAM,IAAI,CAAC,GAAG,GAAG,IAAI,YAAY,CAAC,uBAAuB,KAAK,EAAE,GAAG,CAAC,CAAC,CAAC,CAAC;SAC1F;QAAC,OAAO,CAAC,EAAE;YACV,OAAO,KAAK,CAAC;SACd;IACH,CAAC;IAID,IAAa,IAAI;QACf,OAAO,MAAM,CAAC,IAAI,CAAC,GAAG,CAAC;IACzB,CAAC;IAEQ,KAAK,CAAC,OAAO,CAAC,EAAE,SAAS,EAAE,OAAO,EAAiB;QAC1D,uEAAuE;QACvE,IAAI,CAAC,CAAC,SAAS,IAAI,CAAC,MAAM,YAAY,CAAC,yBAAyB,CAAC,SAAS,CAAC,CAAC,CAAC,EAAE;YAC7E,MAAM,UAAU,GAAG,IAAI,eAAe,CAAC,IAAI,CAAC,WAAW,CAAC,gBAAgB,EAAE,IAAI,CAAC,CAAC,OAAO,EAAE,CAAC;YAC1F,OAAO,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC;SAC1B;IACH,CAAC","sourcesContent":["import { open } from 'fs/promises';\nimport { fileURLToPath } from 'url';\nimport Plugin from '@hilla/generator-typescript-core/Plugin.js';\nimport type SharedStorage from '@hilla/generator-typescript-core/SharedStorage.js';\nimport ClientProcessor from './ClientProcessor.js';\n\nexport default class ClientPlugin extends Plugin {\n  static readonly CLIENT_FILE_NAME = 'connect-client.default';\n  static readonly CUSTOM_CLIENT_FILE_NAME = '../connect-client';\n\n  static async getClientFileName(path?: string): Promise<string> {\n    return (await ClientPlugin.#checkForCustomClientFile(path))\n      ? ClientPlugin.CUSTOM_CLIENT_FILE_NAME\n      : ClientPlugin.CLIENT_FILE_NAME;\n  }\n\n  static async #checkForCustomClientFile(path?: string): Promise<boolean> {\n    const dir = path?.startsWith('file:') ? fileURLToPath(path) : path;\n\n    try {\n      return !!(dir && (await open(`${dir}/${ClientPlugin.CUSTOM_CLIENT_FILE_NAME}.ts`, 'r')));\n    } catch (e) {\n      return false;\n    }\n  }\n\n  declare ['constructor']: typeof ClientPlugin;\n\n  override get path(): string {\n    return import.meta.url;\n  }\n\n  override async execute({ outputDir, sources }: SharedStorage): Promise<void> {\n    // the client file is created only if a custom client file is not found\n    if (!(outputDir && (await ClientPlugin.#checkForCustomClientFile(outputDir)))) {\n      const clientFile = new ClientProcessor(this.constructor.CLIENT_FILE_NAME, this).process();\n      sources.push(clientFile);\n    }\n  }\n}\n"]}